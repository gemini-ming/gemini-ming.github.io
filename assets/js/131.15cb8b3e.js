(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{507:function(v,_,t){"use strict";t.r(_);var n=t(4),l=Object(n.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"二叉树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二叉树"}},[v._v("#")]),v._v(" 二叉树")]),v._v(" "),_("h2",{attrs:{id:"树的基本概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#树的基本概念"}},[v._v("#")]),v._v(" 树的基本概念")]),v._v(" "),_("ul",[_("li",[v._v("节点、根节点、父节点、子节点、兄弟节点")]),v._v(" "),_("li",[v._v("空树：没有任何节点的树")]),v._v(" "),_("li",[v._v("一棵树可以只有 1 个节点，也就是只有根节点")]),v._v(" "),_("li",[v._v("子树、左子树、右子树")])]),v._v(" "),_("p",[v._v("节点的"),_("strong",[v._v("度")]),v._v("（degree）：子树的个数")]),v._v(" "),_("p",[v._v("树的"),_("strong",[v._v("度")]),v._v("：所有节点度中的最大值")]),v._v(" "),_("p",[v._v("叶子节点（leaf）：度为 0 的节点")]),v._v(" "),_("p",[_("strong",[v._v("层数")]),v._v("（level）：根节点在第 1 层，根节点的子节点在第 2 层，以此类推")]),v._v(" "),_("p",[v._v("节点的"),_("strong",[v._v("深度")]),v._v("（depth）：从根节点到当前节点的唯一路径上的节点总数")]),v._v(" "),_("p",[v._v("节点的"),_("strong",[v._v("高度")]),v._v("（height）：从当前节点到最远叶子节点的路径上的节点总数")]),v._v(" "),_("p",[v._v("树的"),_("strong",[v._v("深度")]),v._v("：所有节点深度中的最大值")]),v._v(" "),_("p",[v._v("树的"),_("strong",[v._v("高度")]),v._v("：所有节点高度中的最大值")]),v._v(" "),_("p",[v._v("树的"),_("strong",[v._v("深度")]),v._v(" 等于 树的"),_("strong",[v._v("高度")])]),v._v(" "),_("h2",{attrs:{id:"有序树、无序树、森林"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#有序树、无序树、森林"}},[v._v("#")]),v._v(" 有序树、无序树、森林")]),v._v(" "),_("p",[_("em",[v._v("有序树")])]),v._v(" "),_("p",[v._v("树中任意节点的子节点之间有顺序关系")]),v._v(" "),_("p",[_("em",[v._v("无序树")])]),v._v(" "),_("ul",[_("li",[v._v("树中任意节点的子节点之间没有顺序关系")]),v._v(" "),_("li",[v._v("也称为“自由树”")])]),v._v(" "),_("p",[_("em",[v._v("森林")])]),v._v(" "),_("p",[v._v("由 m(m >= 0) 棵互不相交的树组成的集合")]),v._v(" "),_("h2",{attrs:{id:"二叉树-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二叉树-2"}},[v._v("#")]),v._v(" 二叉树")]),v._v(" "),_("h3",{attrs:{id:"特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[v._v("#")]),v._v(" 特点")]),v._v(" "),_("ol",[_("li",[v._v("每个节点的"),_("strong",[v._v("度")]),v._v("最大为 2（最多拥有 2 棵子树)")]),v._v(" "),_("li",[v._v("左子树和右子树是有顺序的，即使某节点"),_("strong",[v._v("只有一棵子树，也要区分左右子树")]),v._v("（有顺序但没有大小的限制）")])]),v._v(" "),_("h3",{attrs:{id:"性质"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#性质"}},[v._v("#")]),v._v(" 性质")]),v._v(" "),_("ol",[_("li",[v._v("非空二叉树的第 i 层，最多有 "),_("code",[v._v("2^(i-1)")]),v._v(" 个节点（i >= 1）")]),v._v(" "),_("li",[v._v("在高度为 h 的二又树上最多有 "),_("code",[v._v("2^h - 1")]),v._v(" 个结点（h >= 1）")]),v._v(" "),_("li",[v._v("对于任何一棵非空二叉树，如果叶子节点个数为 n0，度为 2 的节点个数为 n2，则有：n = n2 + 1\n"),_("ul",[_("li",[v._v("假设度为 1 的节点个数为 n1，那么二叉树的节点总数 n = n0 + n1 + n2")]),v._v(" "),_("li",[v._v("二叉树的边数 T = n1 + 2 * n2 = "),_("strong",[v._v("n - 1")]),v._v(" = n0 + n1 + n2 - 1（除了根节点，每个节点都有一条边）")])])])]),v._v(" "),_("h2",{attrs:{id:"真二叉树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#真二叉树"}},[v._v("#")]),v._v(" 真二叉树")]),v._v(" "),_("p",[_("strong",[v._v("真二叉树")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("所有节点的"),_("em",[v._v("度")]),v._v("都要么为 0，要么为 2。（0,2）")])]),v._v(" "),_("h2",{attrs:{id:"满二叉树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#满二叉树"}},[v._v("#")]),v._v(" 满二叉树")]),v._v(" "),_("p",[_("strong",[v._v("满二叉树")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("所有节点的"),_("em",[v._v("度")]),v._v("都要么为 0，要么为 2，（0, 2）")]),v._v(" "),_("li",[_("strong",[v._v("且所有的"),_("em",[v._v("叶子")]),v._v("节点都在【最后一层】。")])])]),v._v(" "),_("p",[v._v("性质：")]),v._v(" "),_("ol",[_("li",[v._v("在同样高度的二叉树中，满二叉树的叶子节点数量最多、总节点数量最多")]),v._v(" "),_("li",[v._v("满二叉树一定是真二叉树，真二叉树不一定是满二叉树")]),v._v(" "),_("li",[v._v("假设满二叉树的高度为 h(h >= 1)，那么\n"),_("ul",[_("li",[v._v("第 i 层的节点数量: 2^(i-1)")]),v._v(" "),_("li",[v._v("叶子节点数量: 2^(h-1)")]),v._v(" "),_("li",[v._v("总节点数量 n\n"),_("ul",[_("li",[v._v("n = 2^h - 1 = 2^0 + 2^1 + 2^2 + ... + 2^(h-1)")]),v._v(" "),_("li",[v._v("h = log2(n+1)")])])])])])]),v._v(" "),_("h2",{attrs:{id:"完全二叉树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#完全二叉树"}},[v._v("#")]),v._v(" 完全二叉树")]),v._v(" "),_("h3",{attrs:{id:"概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[v._v("#")]),v._v(" 概念")]),v._v(" "),_("p",[_("strong",[v._v("完全二叉树")]),v._v("：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("叶子节点只会出现最后 2 层，（0, 1, 2）")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("且最后 1 层的"),_("em",[v._v("叶子")]),v._v("结点都"),_("em",[v._v("靠左")]),v._v("对齐。")])])]),v._v(" "),_("li",[_("p",[v._v("完全二叉树从"),_("em",[v._v("根节点")]),v._v("至"),_("em",[v._v("倒数第 2 层")]),v._v("是一颗"),_("strong",[v._v("满二叉树")])])]),v._v(" "),_("li",[_("p",[v._v("【满二叉树】一定是【完全二叉树】，【完全二叉树】不一定是【满二叉树】")])])]),v._v(" "),_("h3",{attrs:{id:"性质-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#性质-2"}},[v._v("#")]),v._v(" 性质")]),v._v(" "),_("ol",[_("li",[v._v("度为 1 的节点只有左子树")]),v._v(" "),_("li",[v._v("度为 1 的节点要么是 1 个，要么是 0 个")]),v._v(" "),_("li",[v._v("同样节点数量的二叉树，完全二叉树的高度最小")]),v._v(" "),_("li",[v._v("假设完全二叉树的高度为 h(h>=1)，那么\n"),_("ul",[_("li",[v._v("至少有 "),_("em",[v._v("2^(h-1)")]),v._v(" 个节点 (2^0 + 2^1 + 2^2 + ... + 2^(h-2) + 1）")]),v._v(" "),_("li",[v._v("最多有 "),_("em",[v._v("2^h - 1")]),v._v(" 个节点（2^0 + 2^1 + 2^2 + ... + 2^(h-1)，满二又树)")]),v._v(" "),_("li",[v._v("总节点数量为 n")])])])]),v._v(" "),_("p",[v._v("高度 h 与 总节点数量 n 的运算：")]),v._v(" "),_("ul",[_("li",[v._v("2^(h-1) <= n < 2^h")]),v._v(" "),_("li",[v._v("h-1 < log2(n) < h")]),v._v(" "),_("li",[v._v("h = floor(log2(n)) + 1")])]),v._v(" "),_("blockquote",[_("ol",[_("li",[_("code",[v._v("floor")]),v._v("（向下取整）：只取前面的整数。比如 floor(4.6) 为4")]),v._v(" "),_("li",[_("code",[v._v("ceiling")]),v._v("（向上取整）：如果小数不为 0，取前面的整数加 1，否则只取前面的整数。比如 ceiling(4.6) 为 5，ceiling(4.0) 为 4")]),v._v(" "),_("li",[v._v("平常运算默认向下取整（5/2 = 2）")])])]),v._v(" "),_("p",[_("em",[v._v("编号问题：")])]),v._v(" "),_("p",[_("img",{staticClass:"lazy",attrs:{alt:"image","data-src":"https://cmty256.github.io/imgs-blog/basics/image.5p63hsdswi80.png",loading:"lazy"}})]),v._v(" "),_("h3",{attrs:{id:"面试题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面试题"}},[v._v("#")]),v._v(" 面试题")]),v._v(" "),_("blockquote",[_("p",[v._v("题目：如果一颗完全二叉树有 768 个节点，求叶子节点的个数。")])]),v._v(" "),_("p",[v._v("假设叶子节点个数为 n0，度为 1 的节点个数为 n1，度为 2 的节点个数为 n2")]),v._v(" "),_("p",[v._v("=> 总结点个数 n = n0 + n1 + n2，而且 n0 = n2 + 1")]),v._v(" "),_("p",[v._v("所以可推导："),_("code",[v._v("n = 2n0 + n1 - 1")])]),v._v(" "),_("p",[_("em",[v._v("利用性质：完全二叉树的 n1 要么为 0，要么为 1")])]),v._v(" "),_("p",[v._v("可推出：")]),v._v(" "),_("ol",[_("li",[v._v("n1 为 1 时，n = 2n0，n 必然是"),_("strong",[v._v("偶数")]),v._v(" "),_("ul",[_("li",[v._v("叶子节点个数 "),_("code",[v._v("n0 = n/2")]),v._v("，非叶子节点个数 n1 + n2 = n/2")])])]),v._v(" "),_("li",[v._v("n1 为 0 时，n = 2n0 - 1，n 必然是"),_("strong",[v._v("奇数")]),v._v(" "),_("ul",[_("li",[v._v("叶子节点个数 "),_("code",[v._v("n0 = (n+1)/2 = n/2 + 1/2")]),v._v("，非叶子节点个数 n1 + n2 = (n-1)/2")])])])]),v._v(" "),_("p",[_("em",[v._v("总结")])]),v._v(" "),_("p",[v._v("利用"),_("strong",[v._v("向上或向下取整")]),v._v("（省略了小数的影响）可得出通用公式，这样就无需判断了")]),v._v(" "),_("ul",[_("li",[v._v("叶子节点个数 n0 = "),_("code",[v._v("(n+1)/2")]),v._v(" = floor( (n+1)/2 ) = ceiling( n/2 )")]),v._v(" "),_("li",[v._v("非叶子节点个数 n1 + n2 = "),_("code",[v._v("n/2")]),v._v(" = floor( n/2 ) = ceiling( (n-1)/2 )")]),v._v(" "),_("li",[v._v("因此叶子节点个数为 384")])])])}),[],!1,null,null,null);_.default=l.exports}}]);