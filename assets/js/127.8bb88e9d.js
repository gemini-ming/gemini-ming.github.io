(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{459:function(t,v,_){"use strict";_.r(v);var a=_(1),r=Object(a.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"springboot3知识汇总"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#springboot3知识汇总"}},[t._v("#")]),t._v(" SpringBoot3知识汇总")]),t._v(" "),v("h2",{attrs:{id:"aot-与-jit-的介绍"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#aot-与-jit-的介绍"}},[t._v("#")]),t._v(" AOT 与 JIT 的介绍")]),t._v(" "),v("h3",{attrs:{id:"含义说明"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#含义说明"}},[t._v("#")]),t._v(" 含义说明")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("JIT（"),v("em",[t._v("Just-in-Time")]),t._v("，实时编译）-- Java 跨平台的基础")])]),t._v(" "),v("li",[v("p",[t._v("AOT（"),v("em",[t._v("Ahead-of-Time")]),t._v("，预编译或提前编译）-- 无法跨平台")])])]),t._v(" "),v("h3",{attrs:{id:"aot-的优点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#aot-的优点"}},[t._v("#")]),t._v(" AOT 的优点")]),t._v(" "),v("ol",[v("li",[t._v("启动和运行速度快")]),t._v(" "),v("li",[t._v("打包体积小")])]),t._v(" "),v("blockquote",[v("p",[t._v("主要是为了朝"),v("strong",[t._v("云原生")]),t._v("方向发展")])]),t._v(" "),v("h3",{attrs:{id:"什么是云原生"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是云原生"}},[t._v("#")]),t._v(" 什么是云原生？")]),t._v(" "),v("p",[t._v("云原生，为云而生。")]),t._v(" "),v("p",[t._v("云原生（Cloud Native）是一种构建和运行应用程序的方法，旨在充分利用云计算环境的优势。它强调通过容器化应用程序组件、微服务架构、动态编排和自动化管理来实现敏捷性、可伸缩性、弹性和高可用性。")]),t._v(" "),v("p",[t._v("关键的云原生特征包括：")]),t._v(" "),v("ol",[v("li",[v("strong",[t._v("容器化：")]),t._v(" 将应用程序和其所有依赖项封装到容器中，确保在不同环境中的一致性运行。")]),t._v(" "),v("li",[v("strong",[t._v("微服务架构：")]),t._v(" 将应用程序划分为小型、独立、可独立开发和部署的服务，提高灵活性和可维护性。")]),t._v(" "),v("li",[v("strong",[t._v("动态编排：")]),t._v(" 使用容器编排工具（例如 Kubernetes）自动化容器的部署、伸缩、负载均衡和故障恢复。")]),t._v(" "),v("li",[v("strong",[t._v("持续交付：")]),t._v(" 强调自动化的构建、测试和部署流程，以实现更频繁和可靠的交付。")]),t._v(" "),v("li",[v("strong",[t._v("敏捷性：")]),t._v(" 采用敏捷开发和敏捷运维原则，鼓励快速迭代和持续改进。")]),t._v(" "),v("li",[v("strong",[t._v("弹性和可伸缩性：")]),t._v(" 可以动态地适应负载变化，实现弹性和可伸缩的应用程序架构。")]),t._v(" "),v("li",[v("strong",[t._v("服务发现和治理：")]),t._v(" 提供服务发现和治理机制，确保微服务之间的通信和协同。")]),t._v(" "),v("li",[v("strong",[t._v("日志和监控：")]),t._v(" 强调在整个应用程序生命周期中的日志记录和监控，以便实时了解应用程序的状态和性能。")]),t._v(" "),v("li",[v("strong",[t._v("多租户和云原生安全：")]),t._v(" 考虑在云环境中的多租户需求，并强调云原生安全的实践。")])]),t._v(" "),v("p",[t._v("这些原则和实践使得云原生应用程序更容易部署、扩展和管理，并能更好地利用云计算平台的优势。Kubernetes 是当前广泛使用的云原生技术之一，用于容器编排和管理。")]),t._v(" "),v("h3",{attrs:{id:"aot-的缺点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#aot-的缺点"}},[t._v("#")]),t._v(" AOT 的缺点")]),t._v(" "),v("ol",[v("li",[t._v("编译后的程序不支持跨平台")]),t._v(" "),v("li",[t._v("不支持动态功能，如 AOP\n"),v("ul",[v("li",[t._v("因为是预编译的，所以就没有了 AOP 这种面向切面编程的功能。")])])])]),t._v(" "),v("h2",{attrs:{id:"jit-在高并发场景中的生产问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jit-在高并发场景中的生产问题"}},[t._v("#")]),t._v(" JIT 在高并发场景中的生产问题")]),t._v(" "),v("h3",{attrs:{id:"生产问题现象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#生产问题现象"}},[t._v("#")]),t._v(" 生产问题现象")]),t._v(" "),v("p",[v("em",[t._v("前提")])]),t._v(" "),v("p",[t._v("要超过一定的并发量。")]),t._v(" "),v("p",[v("em",[t._v("现象")])]),t._v(" "),v("p",[t._v("热点应用重启后，出现业务超时，几分钟后恢复正常。")]),t._v(" "),v("p",[v("em",[t._v("解析")])]),t._v(" "),v("p",[t._v("重启后大量请求进来，导致多个类同时触发 JIT 超时，导致机器 CPU 升高，性能下降。")]),t._v(" "),v("p",[v("em",[t._v("执行方式")])]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"image","data-src":"https://cmty256.github.io/imgs-blog/basics/image.q7li4f3j8zk.webp",loading:"lazy"}})]),t._v(" "),v("ul",[v("li",[t._v("JVM 混合执行模式"),v("strong",[t._v("初期")]),t._v("以"),v("strong",[t._v("解释")]),t._v("方式执行，执行效率慢；")]),t._v(" "),v("li",[t._v("当【"),v("strong",[t._v("执行次数 / 频率")]),t._v("】达到指定阀值后，促发 "),v("strong",[t._v("JIT 编译")]),t._v("后；编译后，以机器指令码方式执行，执行效率提高。")])]),t._v(" "),v("p",[v("em",[t._v("细节分析")])]),t._v(" "),v("ol",[v("li",[t._v("启动初期：应用以解释执行，执行效率较慢，CPU 有所上升")]),t._v(" "),v("li",[t._v("触发 JIT 编译：CPU&load 飙高，使请求堆积线程池满，出现请求处理超时的情况")]),t._v(" "),v("li",[t._v("JIT 编译后：CPU 降低，请求处理较之前快，服务逐步恢复。")])]),t._v(" "),v("h3",{attrs:{id:"解决办法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#解决办法"}},[t._v("#")]),t._v(" 解决办法")]),t._v(" "),v("ol",[v("li",[v("strong",[t._v("预热")]),t._v("：初始让程序自动运行热点代码几百次")]),t._v(" "),v("li",[v("strong",[t._v("流量控制")]),t._v("：启动时小流量，运行几分钟后再放到正常流量")])]),t._v(" "),v("h2",{attrs:{id:"springboot3-graalvm-代替-jdk-实现-aot"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#springboot3-graalvm-代替-jdk-实现-aot"}},[t._v("#")]),t._v(" SpringBoot3-GraalVM 代替 JDK 实现 AOT")]),t._v(" "),v("p",[v("em",[t._v("什么是 GraalVM ?")])]),t._v(" "),v("p",[t._v("GraalVM 是一个跨语言的通用虚拟机，不仅支持了 Java、Scala、Groovy、 Kotlin 等基于 JVM 的语言，以及 C、C++ 等基于 LLVM 的语言，还支持其它像 JavaScript、Ruby、Rust、Python 和 R 语言等。")]),t._v(" "),v("p",[v("em",[t._v("参考文章")])]),t._v(" "),v("p",[v("a",{attrs:{href:"https://cloud.tencent.com/developer/article/2195457",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用GraalVM 构建 Spring Boot 3.0 原生可执行文件-腾讯云开发者社区-腾讯云 (tencent.com)"),v("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=r.exports}}]);