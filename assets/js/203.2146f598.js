(window.webpackJsonp=window.webpackJsonp||[]).push([[203],{575:function(t,a,_){"use strict";_.r(a);var r=_(4),v=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"网关基础知识小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网关基础知识小结"}},[t._v("#")]),t._v(" 网关基础知识小结")]),t._v(" "),a("h2",{attrs:{id:"什么是网关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是网关"}},[t._v("#")]),t._v(" 什么是网关？")]),t._v(" "),a("p",[t._v("网关是一种用于构建微服务架构的重要组件，可以提供路由、转换、过滤、安全性等功能。API 网关可以作为微服务架构中"),a("strong",[t._v("所有请求的入口")]),t._v("，它可以将来自客户端的请求"),a("strong",[t._v("路由到")]),t._v("正确的服务实例，并将返回的结果转换为客户端所需的格式。简单来说，网关主要做了两件事："),a("strong",[t._v("请求转发")]),t._v(" + "),a("strong",[t._v("请求过滤")]),t._v("。统一去处理某一些事。")]),t._v(" "),a("h2",{attrs:{id:"为什么需要网关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要网关"}},[t._v("#")]),t._v(" 为什么需要网关？")]),t._v(" "),a("p",[t._v("因为在微服务背景下，一个系统会被拆分为多个服务，但是像安全认证，流量控制，日志，监控等功能是每个服务都需要的，没有网关的话，我们就需要在每个服务中单独实现，这会使得我们需要做很多重复的事情并且没有一个全局的视图来统一管理这些功能。而网关可以帮助微服务架构实现服务之间的解耦、协议转换、安全控制、负载均衡和监控统计等功能，从而提高系统的可用性、性能和安全性。")]),t._v(" "),a("h2",{attrs:{id:"网关能提供哪些功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网关能提供哪些功能"}},[t._v("#")]),t._v(" 网关能提供哪些功能？")]),t._v(" "),a("p",[t._v("绝大部分网关可以提供下面这些功能：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("路由转发功能")]),t._v("：路由是微服务网关的核心能力。通过路由功能微服务网关可以将请求转发到目标微服务。在微服务架构中，网关可以结合注册中心的动态服务发现，实现对后端服务的发现，调用方只需要知道网关对外暴露的服务API就可以透明地访问后端微服务。")]),t._v(" "),a("li",[a("strong",[t._v("负载均衡")]),t._v("：根据各个微服务实例的负载情况或者具体的负载均衡策略配置对请求实现动态的负载均衡。")]),t._v(" "),a("li",[a("strong",[t._v("安全认证")]),t._v("：对用户请求进行身份验证并仅允许可信客户端访问 API，并且还能够使用类似 RBAC 等方式来授权。")]),t._v(" "),a("li",[a("strong",[t._v("参数校验")]),t._v("：支持参数映射与校验逻辑。")]),t._v(" "),a("li",[a("strong",[t._v("日志记录")]),t._v("：记录所有请求的行为日志供后续使用。")]),t._v(" "),a("li",[a("strong",[t._v("监控告警")]),t._v("：从业务指标、机器指标、JVM 指标等方面进行监控并提供配套的告警机制。")]),t._v(" "),a("li",[a("strong",[t._v("流量控制")]),t._v("：对请求的流量进行控制，也就是限制某一时刻内的请求数。")]),t._v(" "),a("li",[a("strong",[t._v("熔断降级")]),t._v("：实时监控请求的统计信息，达到配置的失败阈值后，自动熔断，返回默认值。")]),t._v(" "),a("li",[a("strong",[t._v("响应缓存")]),t._v("：当用户请求获取的是一些静态的或更新不频繁的数据时，一段时间内多次请求获取到的数据很可能是一样的。对于这种情况可以将响应缓存起来。这样用户请求可以直接在网关层得到响应数据，无需再去访问业务服务，减轻业务服务的负担。")]),t._v(" "),a("li",[a("strong",[t._v("响应聚合")]),t._v("：某些情况下用户请求要获取的响应内容可能会来自于多个业务服务。网关作为业务服务的调用方，可以把多个服务的响应整合起来，再一并返回给用户。")]),t._v(" "),a("li",[a("strong",[t._v("灰度发布")]),t._v("：将请求动态分流到不同的服务版本（最基本的一种灰度发布）。")]),t._v(" "),a("li",[a("strong",[t._v("异常处理")]),t._v("：对于业务服务返回的异常响应，可以在网关层在返回给用户之前做转换处理。这样可以把一些业务侧返回的异常细节隐藏，转换成用户友好的错误提示返回。")]),t._v(" "),a("li",[a("strong",[t._v("API 文档：")]),t._v(" 如果计划将 API 暴露给组织以外的开发人员，那么必须考虑使用 API 文档，例如 Swagger 或 OpenAPI。")]),t._v(" "),a("li",[a("strong",[t._v("协议转换")]),t._v("：通过协议转换整合后台基于 REST、AMQP、Dubbo 等不同风格和实现技术的微服务，面向 Web Mobile、开放平台等特定客户端提供统一服务。")])]),t._v(" "),a("p",[t._v("下图来源于"),a("a",{attrs:{href:"https://mp.weixin.qq.com/s/iITqdIiHi3XGKq6u6FRVdg",target:"_blank",rel:"noopener noreferrer"}},[t._v("百亿规模 API 网关服务 Shepherd 的设计与实现 - 美团技术团队 - 2021open in new window"),a("OutboundLink")],1),t._v("这篇文章。")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"img","data-src":"https://oscimg.oschina.net/oscnet/up-35e102c633bbe8e0dea1e075ea3fee5dcfb.png",loading:"lazy"}})]),t._v(" "),a("h2",{attrs:{id:"常见的网关系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的网关系统"}},[t._v("#")]),t._v(" 常见的网关系统")]),t._v(" "),a("h3",{attrs:{id:"_1-netflix-zuul"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-netflix-zuul"}},[t._v("#")]),t._v(" 1. Netflix Zuul")]),t._v(" "),a("p",[t._v("Zuul 是 Netflix 开发的一款提供动态路由、监控、弹性、安全的网关服务，基于 Java 技术栈开发，可以和 Eureka、Ribbon、Hystrix 等组件配合使用。")]),t._v(" "),a("p",[t._v("主要是通过过滤器（类似于 AOP）来过滤请求，从而实现网关必备的各种功能。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Zuul 1.x 版本基于"),a("strong",[t._v("同步 IO")]),t._v("，性能较差。")])]),t._v(" "),a("li",[a("p",[t._v("Zuul 2.x 版本基于 Netty 实现了"),a("strong",[t._v("异步 IO")]),t._v("，大幅提升了性能。")])])]),t._v(" "),a("p",[a("strong",[t._v("官方文档 Wiki：https://github.com/Netflix/zuul/wiki")])]),t._v(" "),a("h3",{attrs:{id:"_2-spring-cloud-gateway"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-spring-cloud-gateway"}},[t._v("#")]),t._v(" 2. Spring Cloud Gateway")]),t._v(" "),a("p",[t._v("SpringCloud Gateway 属于 Spring Cloud 生态系统中的网关，其诞生的目标是为了替代老牌网关 "),a("strong",[t._v("Zuul")]),t._v("。准确点来说，应该是 Zuul 1.x。SpringCloud Gateway 起步要比 Zuul 2.x 更早，不过和 Zuul 2.x 的差别不大，也是通过过滤器来处理请求。但是，目前更加推荐使用 Spring Cloud Gateway 而非 Zuul，因为 Spring Cloud 生态对其支持更加友好。")]),t._v(" "),a("p",[t._v("为了提升网关的性能，SpringCloud Gateway 基于 Spring WebFlux 。Spring WebFlux 使用 Reactor 库来实现响应式编程模型，"),a("strong",[t._v("底层基于 Netty 实现同步非阻塞的 I/O。")])]),t._v(" "),a("p",[t._v("总结：取代了Zuul，性能高 可以用java代码来写逻辑  适于学习")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("官网：https://spring.io/projects/spring-cloud-gateway")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("官方文档：https://docs.spring.io/spring-cloud-gateway/docs/current/reference//html/")])])])]),t._v(" "),a("h3",{attrs:{id:"_3-kong"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-kong"}},[t._v("#")]),t._v(" 3. Kong")]),t._v(" "),a("p",[t._v("Kong 是一款基于 OpenResty（Nginx + Lua 模块）编写的高可用、易扩展的，由 Mashape 公司开源的 API Gateway 项目。")]),t._v(" "),a("p",[t._v("Kong 主要有三个组件：")]),t._v(" "),a("ul",[a("li",[t._v("Kong Server ：基于 Nginx 的服务器，用来接收 API 请求。")]),t._v(" "),a("li",[t._v("Apache Cassandra/PostgreSQL ：用来存储操作数据。")]),t._v(" "),a("li",[t._v("Kong dashboard：官方推荐 UI 管理工具，也可以使用 restfull 方式管理 admin api。")])]),t._v(" "),a("p",[t._v("Kong 采用"),a("strong",[t._v("插件机制")]),t._v("进行功能定制，插件集（可以是 0 或 N 个）在 API 请求响应循环的生命周期中被执行。插件使用 Lua 编写，目前已有几个基础功能："),a("strong",[t._v("HTTP 基本认证、密钥认证、CORS（Cross-Origin Resource Sharing，跨域资源共享）、TCP、UDP、文件日志、API 请求限流、请求转发以及 Nginx 监控。")])]),t._v(" "),a("p",[a("strong",[t._v("官网地址：https://konghq.com/products/kong-gateway")])]),t._v(" "),a("h3",{attrs:{id:"_4-apisix"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-apisix"}},[t._v("#")]),t._v(" 4. APISIX")]),t._v(" "),a("p",[t._v("APISIX 是一款基于 Nginx 和 etcd 的高性能、云原生、可扩展的网关系统。")]),t._v(" "),a("blockquote",[a("p",[t._v("etcd 是使用 "),a("strong",[t._v("Go 语言开发")]),t._v("的一个开源的、高可用的分布式 key-value 存储系统，使用 Raft 协议做分布式共识。")])]),t._v(" "),a("p",[t._v("作为 NGINX 和 Kong 的替代项目，APISIX 目前已经是 Apache 顶级开源项目，并且是最快毕业的国产开源项目。国内目前已经有很多知名企业（比如金山、有赞、爱奇艺、腾讯、贝壳）使用 APISIX 处理核心的业务流量。")]),t._v(" "),a("p",[t._v("根据官网介绍：“APISIX 已经生产可用，功能、性能、架构全面优于 Kong”。")]),t._v(" "),a("p",[a("strong",[t._v("官网地址：https://apisix.apache.org/zh/")])]),t._v(" "),a("h3",{attrs:{id:"_5-shenyu"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-shenyu"}},[t._v("#")]),t._v(" 5. Shenyu")]),t._v(" "),a("p",[t._v("一款基于 WebFlux 的可扩展、高性能、响应式网关，Apache 顶级开源项目。")]),t._v(" "),a("ul",[a("li",[t._v("官网地址： "),a("a",{attrs:{href:"https://shenyu.apache.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://shenyu.apache.org/open in new window"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"学习参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#学习参考"}},[t._v("#")]),t._v(" 学习参考")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://javaguide.cn/distributed-system/api-gateway.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("API网关基础知识总结 | JavaGuide(Java面试 + 学习指南)"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=v.exports}}]);