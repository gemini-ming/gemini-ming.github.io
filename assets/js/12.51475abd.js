(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{346:function(s,t,a){"use strict";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"java-常见类详解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-常见类详解"}},[s._v("#")]),s._v(" Java 常见类详解")]),s._v(" "),t("h2",{attrs:{id:"object"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[s._v("#")]),s._v(" Object")]),s._v(" "),t("h3",{attrs:{id:"object-类的常见方法有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-类的常见方法有哪些"}},[s._v("#")]),s._v(" Object 类的常见方法有哪些？")]),s._v(" "),t("p",[t("code",[s._v("Object")]),s._v(" 类是一个特殊的类，是所有类的父类。它主要提供了以下 11 个方法：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * native 方法，用于返回当前运行时对象的 Class 对象，使用了 final 关键字修饰，故不允许子类重写。\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("native")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * native 方法，用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的HashMap。\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("native")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hashCode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * 用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写以用于比较字符串的值是否相等。\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("equals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * native 方法，用于创建并返回当前对象的一份拷贝。\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("native")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("clone")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CloneNotSupportedException")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * 返回类的名字实例的哈希码的 16 进制的字符串。建议 Object 所有的子类都重写这个方法。\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * native 方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("native")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("notify")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * native 方法，并且不能重写。跟 notify 一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("native")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("notifyAll")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * native方法，并且不能重写。暂停线程的执行。注意：sleep 方法没有释放锁，而 wait 方法释放了锁 ，timeout 是等待时间。\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("native")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("wait")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" timeout"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InterruptedException")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * 多了 nanos 参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上 nanos 毫秒。。\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("wait")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" timeout"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" nanos"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InterruptedException")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * 跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("wait")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InterruptedException")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * 实例被垃圾回收器回收的时候触发的操作\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("finalize")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Throwable")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br")])]),t("h3",{attrs:{id:"和-equals-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#和-equals-的区别"}},[s._v("#")]),s._v(" == 和 equals() 的区别")]),s._v(" "),t("p",[s._v("1、"),t("strong",[t("code",[s._v("==")])]),s._v(" 对于基本类型和引用类型的作用效果是不同的：")]),s._v(" "),t("ul",[t("li",[s._v("对于基本数据类型来说，"),t("code",[s._v("==")]),s._v(" 比较的是值。")]),s._v(" "),t("li",[s._v("对于引用数据类型来说，"),t("code",[s._v("==")]),s._v(" 比较的是对象的内存地址。")])]),s._v(" "),t("blockquote",[t("p",[s._v("因为 Java 只有值传递，所以，对于 "),t("code",[s._v("==")]),s._v(" 来说，不管是比较基本数据类型，还是引用数据类型的变量，其本质比较的都是值，只是引用类型变量存的值是对象的地址。")])]),s._v(" "),t("p",[s._v("2、"),t("strong",[t("code",[s._v("equals()")])]),s._v(" 不能用于判断基本数据类型的变量，"),t("strong",[s._v("只能用来判断两个对象是否相等")]),s._v("。")]),s._v(" "),t("p",[t("code",[s._v("equals()")]),s._v(" 方法存在两种使用情况：")]),s._v(" "),t("ol",[t("li",[t("p",[t("strong",[s._v("类没有重写 "),t("code",[s._v("equals()")]),s._v(" 方法时")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("等价于通过“==”比较这两个对象，使用的默认是 "),t("code",[s._v("Object")]),s._v("类"),t("code",[s._v("equals()")]),s._v("方法。")]),s._v(" "),t("li",[s._v("即比较的是内存地址。")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("类重写了 "),t("code",[s._v("equals()")]),s._v("方法")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("一般我们都重写 "),t("code",[s._v("equals()")]),s._v(" 方法来比较两个对象中的属性是否相等；若它们的属性相等，则返回 true(即认为这两个对象相等)。")])]),s._v(" "),t("li",[t("p",[s._v("即比较的是内容，比如 "),t("code",[s._v("String")]),s._v(" 中的 "),t("code",[s._v("equals")]),s._v(" 方法就是被重写过的。")])])])])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ab"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// a 为一个引用")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ab"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// b为另一个引用,对象的内容一样")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" aa "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ab"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 放在常量池中")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" bb "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ab"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 从常量池中查找")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("aa "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" bb"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("equals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("42.0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h3",{attrs:{id:"为什么-java-中只有值传递"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么-java-中只有值传递"}},[s._v("#")]),s._v(" 为什么 Java 中只有值传递？")]),s._v(" "),t("p",[s._v("Java 中只有值传递，是因为 Java 中的变量（包括基本类型和引用类型）实际上只是存储在内存中的值，并没有直接指向对象的内存地址。")]),s._v(" "),t("h3",{attrs:{id:"hashcode-有什么用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashcode-有什么用"}},[s._v("#")]),s._v(" hashCode() 有什么用？")]),s._v(" "),t("p",[t("code",[s._v("hashCode()")]),s._v(" 的作用是获取哈希码（"),t("code",[s._v("int")]),s._v(" 整数），也称为散列码。这个哈希码的作用是确定该对象在哈希表中的索引位置。")]),s._v(" "),t("p",[t("code",[s._v("hashCode()")]),s._v(" 方法的主要作用是为了提高哈希表的性能，同时也经常用于对象的比较和判等。")]),s._v(" "),t("h3",{attrs:{id:"为什么要有-hashcode"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么要有-hashcode"}},[s._v("#")]),s._v(" 为什么要有 hashCode？")]),s._v(" "),t("p",[s._v("**因为对于一个类的实例，如果要将其存储到哈希表中，就需要实现 "),t("code",[s._v("hashCode()")]),s._v(" 方法，以便在计算哈希值时能够正确地反映对象的属性。**同时，由于哈希表中可能会有哈希冲突（即不同对象的哈希码相同），因此还需要实现 "),t("code",[s._v("equals()")]),s._v(" 方法来判断两个对象是否相等。")]),s._v(" "),t("blockquote",[t("p",[t("code",[s._v("hashCode()")]),s._v(" 和 "),t("code",[s._v("equals()")]),s._v("都是用于比较两个对象是否相等。")])]),s._v(" "),t("p",[t("em",[t("strong",[s._v("1、那为什么 JDK 还要同时提供这两个方法呢？")])])]),s._v(" "),t("p",[s._v("这是因为在一些容器（比如 "),t("code",[s._v("HashMap")]),s._v("、"),t("code",[s._v("HashSet")]),s._v("）中，有了 "),t("code",[s._v("hashCode()")]),s._v(" 之后，判断元素是否在对应容器中的效率会更高。")]),s._v(" "),t("p",[s._v("也就是说 "),t("code",[s._v("hashCode")]),s._v(" 帮助我们大大缩小了查找成本。")]),s._v(" "),t("p",[t("em",[t("strong",[s._v("2、那为什么不只提供 "),t("code",[s._v("hashCode()")]),s._v(" 方法呢？")])])]),s._v(" "),t("p",[s._v("这是因为两个对象的 "),t("code",[s._v("hashCode")]),s._v(" 值相等并不代表两个对象就相等。")]),s._v(" "),t("p",[t("em",[t("strong",[s._v("3、那为什么两个对象有相同的 "),t("code",[s._v("hashCode")]),s._v(" 值，它们也不一定是相等的？")])])]),s._v(" "),t("p",[s._v("因为 "),t("code",[s._v("hashCode()")]),s._v(" 所使用的哈希算法也许刚好会让多个对象传回相同的哈希值。")]),s._v(" "),t("p",[s._v("越糟糕的哈希算法越容易碰撞，但这也与数据值域分布的特性有关（所谓哈希碰撞也就是指的是不同的对象得到相同的 "),t("code",[s._v("hashCode")]),s._v(" )。")]),s._v(" "),t("p",[s._v("总结下来就是：")]),s._v(" "),t("ul",[t("li",[s._v("如果两个对象的 "),t("code",[s._v("hashCode")]),s._v(" 值相等，那这两个对象不一定相等（哈希碰撞）。")]),s._v(" "),t("li",[s._v("如果两个对象的 "),t("code",[s._v("hashCode")]),s._v(" 值相等并且 "),t("code",[s._v("equals()")]),s._v(" 方法也返回 "),t("code",[s._v("true")]),s._v("，我们才认为这两个对象相等。")]),s._v(" "),t("li",[s._v("如果两个对象的 "),t("code",[s._v("hashCode")]),s._v(" 值不相等，我们就可以直接认为这两个对象不相等。")])]),s._v(" "),t("h3",{attrs:{id:"为什么重写-equals-时必须重写-hashcode-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么重写-equals-时必须重写-hashcode-方法"}},[s._v("#")]),s._v(" 为什么重写 equals() 时必须重写 hashCode() 方法？")]),s._v(" "),t("p",[s._v("因为两个相等的对象的 "),t("code",[s._v("hashCode")]),s._v(" 值必须是相等。也就是说如果 "),t("code",[s._v("equals")]),s._v(" 方法判断两个对象是相等的，那这两个对象的 "),t("code",[s._v("hashCode")]),s._v(" 值也要相等。")]),s._v(" "),t("p",[t("strong",[s._v("如果重写 "),t("code",[s._v("equals()")]),s._v(" 时没有重写 "),t("code",[s._v("hashCode()")]),s._v(" 方法的话就可能会导致 "),t("code",[s._v("equals")]),s._v(" 方法判断是相等的两个对象，"),t("code",[s._v("hashCode")]),s._v(" 值却不相等。")])]),s._v(" "),t("h3",{attrs:{id:"重写-equals-时没有重写-hashcode-方法的话-使用-hashmap-可能会出现什么问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重写-equals-时没有重写-hashcode-方法的话-使用-hashmap-可能会出现什么问题"}},[s._v("#")]),s._v(" 重写 "),t("code",[s._v("equals()")]),s._v(" 时没有重写 "),t("code",[s._v("hashCode()")]),s._v(" 方法的话，使用 "),t("code",[s._v("HashMap")]),s._v(" 可能会出现什么问题？")]),s._v(" "),t("p",[s._v("如果在重写 "),t("code",[s._v("equals()")]),s._v(" 方法的同时没有重写 "),t("code",[s._v("hashCode()")]),s._v(" 方法，那么在将对象存储到 HashMap 中时，可能会出现以下问题：")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("相等的对象返回不同的哈希码")]),s._v("：如果两个对象在 equals() 方法中被认为是相等的，但是它们的 hashCode() 方法返回的哈希码不同，那么"),t("strong",[s._v("它们将会被存储在 HashMap 中的不同位置")]),s._v("，这样可能"),t("strong",[s._v("会导致在查找或删除元素时出现问题")]),s._v("。")]),s._v(" "),t("li",[t("strong",[s._v("不同的对象返回相同的哈希码")]),s._v("：如果两个对象在 equals() 方法中被认为不相等，但是它们的 hashCode() 方法返回的哈希码相同，那么"),t("strong",[s._v("它们将会被存储在 HashMap 中的同一个位置")]),s._v("，这样可能"),t("strong",[s._v("会导致在查找或删除元素时出现问题")]),s._v("。")])]),s._v(" "),t("blockquote",[t("p",[s._v("简单来说就是会出现两个问题：无法正常存储对象和无法正常查找对象。")])]),s._v(" "),t("p",[s._v("因此，在重写 equals() 方法的同时，也应该重写 hashCode() 方法，以确保相等的对象具有相同的哈希码，不相等的对象具有不同的哈希码。这样可以保证 HashMap 的正确性和性能。")]),s._v(" "),t("h2",{attrs:{id:"string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[s._v("#")]),s._v(" String")]),s._v(" "),t("h3",{attrs:{id:"string、stringbuffer-和-stringbuilder-的区别是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string、stringbuffer-和-stringbuilder-的区别是什么"}},[s._v("#")]),s._v(" String、StringBuffer 和 StringBuilder 的区别是什么？")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("String")]),s._v(" 是不可变的，每次对字符串操作都会生成一个新的字符串对象；")]),s._v(" "),t("li",[s._v("而 "),t("code",[s._v("StringBuffer")]),s._v(" 和 "),t("code",[s._v("StringBuilder")]),s._v(" 是可变，可以在原有对象的基础上进行修改，因此能够提高程序的执行效率。")])]),s._v(" "),t("p",[t("code",[s._v("String")]),s._v(" 中的对象是不可变的，也就可以理解为常量，线程安全。")]),s._v(" "),t("p",[t("code",[s._v("StringBuffer")]),s._v(" 是线程安全的，它的方法都是同步的，依次可以在多线程环境下安全使用但执行速度较慢；")]),s._v(" "),t("p",[s._v("而 "),t("code",[s._v("StringBuilder")]),s._v(" 是线程不安全的，它的方法不是同步的，因此在单线程环境下的执行速度比 "),t("code",[s._v("StringBuffer")]),s._v(" 快。")]),s._v(" "),t("h3",{attrs:{id:"string-为什么是不可变的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-为什么是不可变的"}},[s._v("#")]),s._v(" String 为什么是不可变的？")]),s._v(" "),t("ol",[t("li",[s._v("保存字符串的数组被 "),t("code",[s._v("final")]),s._v(" 修饰且为私有，并且 "),t("code",[s._v("String")]),s._v(" 类没有提供修改这个字符串的方法。")]),s._v(" "),t("li",[t("code",[s._v("String")]),s._v(" 类被 "),t("code",[s._v("final")]),s._v(" 修饰导致其不能被继承，进而避免了子类破坏 "),t("code",[s._v("String")]),s._v(" 的可能性。")])]),s._v(" "),t("blockquote",[t("p",[s._v("除此之外，String 对象的不可变是由于对 String 类型的所有改变内部存储结构的操作都会 new 出一个新的 String 对象。")])]),s._v(" "),t("h3",{attrs:{id:"字符串拼接用-还是-stringbuilder"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串拼接用-还是-stringbuilder"}},[s._v("#")]),s._v(" 字符串拼接用 + 还是 StringBuilder?")]),s._v(" "),t("p",[s._v("Java 语言本身并不支持运算符重载，"),t("code",[s._v("+")]),s._v(" 和 "),t("code",[s._v("+=")]),s._v(" 是专门为 String 类重载过的运算符，也是 Java 中仅有的两个重载过的运算符。")]),s._v(" "),t("p",[s._v("字符串对象通过 "),t("code",[s._v("+")]),s._v(" 的字符串拼接方式，实际上是通过 "),t("code",[s._v("StringBuilder")]),s._v(" 调用 "),t("code",[s._v("append()")]),s._v(" 方法实现的，拼接完成之后调用 "),t("code",[s._v("toString()")]),s._v(" 得到一个 "),t("code",[s._v("String")]),s._v(" 对象 。")]),s._v(" "),t("p",[s._v("需要注意的是：")]),s._v(" "),t("p",[s._v("如果在循环内使用 "),t("code",[s._v("+")]),s._v(" 进行字符串的拼接的话，存在比较明显的缺陷："),t("strong",[s._v("编译器不会创建单个 "),t("code",[s._v("StringBuilder")]),s._v(" 以复用，会导致创建过多的 "),t("code",[s._v("StringBuilder")]),s._v(" 对象")]),s._v("。")]),s._v(" "),t("p",[s._v("即每循环一次就会创建一个 "),t("code",[s._v("StringBuilder")]),s._v(" 对象")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" arr "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"he"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"llo"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"world"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("如果直接使用 "),t("code",[s._v("StringBuilder")]),s._v(" 对象进行字符串拼接的话，就不会存在这个问题了。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" arr "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"he"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"llo"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"world"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringBuilder")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringBuilder")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用 StringBuilder 对象")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h3",{attrs:{id:"string-equals-和-object-equals-有何区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-equals-和-object-equals-有何区别"}},[s._v("#")]),s._v(" String#equals() 和 Object#equals() 有何区别？")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("String")]),s._v(" 中的 "),t("code",[s._v("equals")]),s._v(" 方法是被重写过的，比较的是 String 字符串的值是否相等。")]),s._v(" "),t("li",[t("code",[s._v("Object")]),s._v(" 的 "),t("code",[s._v("equals")]),s._v(" 方法是比较的对象的内存地址")])]),s._v(" "),t("h3",{attrs:{id:"字符串常量池的作用了解吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串常量池的作用了解吗"}},[s._v("#")]),s._v(" 字符串常量池的作用了解吗？")]),s._v(" "),t("p",[t("strong",[s._v("字符串常量池")]),s._v(" 是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，"),t("strong",[s._v("主要目的是为了避免字符串的重复创建")]),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"string-str-new-string-aaa-会创建几个字符串对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-str-new-string-aaa-会创建几个字符串对象"}},[s._v("#")]),s._v(' String str = new String("aaa");会创建几个字符串对象？')]),s._v(" "),t("p",[s._v("会创建 1 或 2 个字符串对象。")]),s._v(" "),t("blockquote",[t("p",[s._v("创建 2 个的情况")])]),s._v(" "),t("ol",[t("li",[s._v('第一个字符串对象是 "aaa"，它是在编译期间就创建好的，存储在字符串常量池中。')]),s._v(" "),t("li",[s._v('第二个字符串对象是 new String("aaa")，它是在运行期间通过 new 关键字创建的。这个对象会在堆内存中开辟一个新的空间，用于存储字符串 "aaa" 的拷贝。')])]),s._v(" "),t("blockquote",[t("p",[s._v("创建 1 个的情况")])]),s._v(" "),t("p",[s._v('但是，如果字符串常量池中已经存在了一个值为 "aaa" 的字符串，那么在执行 new String("aaa") 时，JVM 会先在字符串常量池中查找是否存在相同值的字符串，如果存在，则直接返回该字符串的引用，不会再创建一个新的对象。这种情况下，只会创建一个字符串对象。')]),s._v(" "),t("h3",{attrs:{id:"string-intern-方法有什么作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-intern-方法有什么作用"}},[s._v("#")]),s._v(" String.intern() 方法有什么作用?")]),s._v(" "),t("p",[t("code",[s._v("String.intern()")]),s._v(" 是一个 native（本地）方法，其"),t("strong",[s._v("作用是将指定的字符串对象的引用保存在字符串常量池中")]),s._v("。")]),s._v(" "),t("p",[s._v("可以简单分为两种情况：")]),s._v(" "),t("ul",[t("li",[s._v("如果字符串常量池中保存了对应的字符串对象的引用，就直接返回该引用。")]),s._v(" "),t("li",[s._v("如果字符串常量池中没有保存了对应的字符串对象的引用，那就在常量池中创建一个指向该字符串对象的引用并返回。")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在常量池中创建字符串对象”Java“")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将字符串对象”Java“的引用保存在字符串常量池中")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Java"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 直接返回字符串常量池中字符串对象”Java“对应的引用")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("intern")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 会在堆中在单独创建一个字符串对象")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Java"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 直接返回字符串常量池中字符串对象”Java“对应的引用")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s4 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("intern")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// s1 和 s2 指向的是堆中的同一个对象")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" s2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// s3 和 s4 指向的是堆中不同的对象")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" s4"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// s1 和 s4 指向的是堆中的同一个对象")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" s4"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("h3",{attrs:{id:"string-类型的变量和常量做-运算时发生了什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-类型的变量和常量做-运算时发生了什么"}},[s._v("#")]),s._v(" String 类型的变量和常量做 + 运算时发生了什么？")]),s._v(" "),t("p",[s._v("1、字符串不加 "),t("code",[s._v("final")]),s._v(" 关键字拼接的情况：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"str"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ing"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"str"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ing"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 常量池中的对象")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str4 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" str1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" str2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在堆上创建的新的对象")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str5 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" str4"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" str5"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str4 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" str5"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[t("code",[s._v("str3 == str5")])]),s._v(" "),t("p",[s._v("这主要是因为在编译过程中，Javac 编译器（下文中统称为编译器）会进行一个叫做 "),t("strong",[s._v("常量折叠(Constant Folding)")]),s._v(" 的代码优化。")]),s._v(" "),t("p",[s._v("2、字符串使用 "),t("code",[s._v("final")]),s._v(" 关键字之后拼接的情况：")]),s._v(" "),t("p",[s._v("被 "),t("code",[s._v("final")]),s._v(" 关键字修改之后的 "),t("code",[s._v("String")]),s._v(" 会被编译器当做常量来处理，编译器在程序编译期就可以确定它的值，其效果就相当于访问常量。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"str"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ing"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 下面两个表达式其实是等价的")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"str"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ing"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 常量池中的对象")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" d "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" str1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" str2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 常量池中的对象")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" d"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("如果 ，编译器在运行时才能知道其确切值的话，就无法对其优化。")]),s._v(" "),t("p",[s._v("示例代码（"),t("code",[s._v("str2")]),s._v(" 在运行时才能确定其值）：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"str"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getStr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"str"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ing"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 常量池中的对象")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" d "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" str1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" str2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在堆上创建的新的对象")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" d"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getStr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ing"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h2",{attrs:{id:"tostring-和-string-valueof"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tostring-和-string-valueof"}},[s._v("#")]),s._v(" toString 和 String.valueOf")]),s._v(" "),t("p",[s._v("toString() 方法和 String.valueOf() 方法在 Java 中用于将对象转换为字符串表示形式。")]),s._v(" "),t("p",[t("em",[s._v("区别")])]),s._v(" "),t("ul",[t("li",[t("code",[s._v("toString()")]),s._v(" 方法是一个"),t("strong",[s._v("实例方法")]),s._v("，必须通过具体的对象调用。它通常用于自定义类，可以根据需要自定义返回的字符串格式。")]),s._v(" "),t("li",[t("code",[s._v("String.valueOf()")]),s._v(" 方法是一个"),t("strong",[s._v("静态方法")]),s._v("，可以直接通过类名调用。它适用于将各种类型的数据转换为字符串，包括基本数据类型、对象和 null。")]),s._v(" "),t("li",[s._v("如果对象为 null，"),t("code",[s._v("toString()")]),s._v(" 方法会抛出 "),t("code",[s._v("NullPointerException")]),s._v(" 异常，而 "),t("code",[s._v("String.valueOf()")]),s._v(" 方法会返回字符串 "),t("code",[s._v('"null"')]),s._v("。")])]),s._v(" "),t("h3",{attrs:{id:"默认的-tostring-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#默认的-tostring-方法"}},[s._v("#")]),s._v(" 默认的 toString() 方法")]),s._v(" "),t("ol",[t("li",[s._v("如果在自定义类中没有重写 toString() 方法，将使用 Object 类中的默认实现。")]),s._v(" "),t("li",[s._v("默认 toString() 方法返回一个由"),t("code",[s._v("类名、@ 符号和对象的哈希码")]),s._v("组成的字符串，例如："),t("code",[s._v('"ClassName@HashCode"')]),s._v("。")])])])}),[],!1,null,null,null);t.default=e.exports}}]);