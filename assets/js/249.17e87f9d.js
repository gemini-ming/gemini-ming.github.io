(window.webpackJsonp=window.webpackJsonp||[]).push([[249],{623:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"lombok-注解使用小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lombok-注解使用小结"}},[t._v("#")]),t._v(" lombok 注解使用小结")]),t._v(" "),s("blockquote",[s("p",[t._v("lombok 是在"),s("strong",[t._v("编译期")]),t._v("时生成，可在 target 目录下看见构造器注入的内容。")])]),t._v(" "),s("h2",{attrs:{id:"常用注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用注解"}},[t._v("#")]),t._v(" 常用注解")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("@Data")]),t._v("：注在类上，提供类的 get、set、equals、hashCode、canEqual、toString 方法")]),t._v(" "),s("li",[s("code",[t._v("@Setter")]),t._v("：注在"),s("strong",[t._v("属性")]),t._v("上，提供 set 方法")]),t._v(" "),s("li",[s("code",[t._v("@Getter")]),t._v("：注在"),s("strong",[t._v("属性")]),t._v("上，提供 get 方法")]),t._v(" "),s("li",[s("code",[t._v("@EqualsAndHashCode")]),t._v("：注在类上，提供对应的 equals 和 hashCode 方法")]),t._v(" "),s("li",[s("code",[t._v("@Log4j/@Slf4j")]),t._v("：注在类上，提供对应的 Logger 对象，变量名为 log")])]),t._v(" "),s("h2",{attrs:{id:"bean-注入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean-注入"}},[t._v("#")]),t._v(" Bean 注入")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("@NoArgsConstructor")]),t._v(" / "),s("code",[t._v("@RequiredArgsConstructor")]),t._v(" / "),s("code",[t._v("@AllArgsConstructor")])])]),t._v(" "),s("p",[t._v("这三个注解都是"),s("strong",[t._v("用在类上")]),t._v("的，")]),t._v(" "),s("ul",[s("li",[t._v("第一个和第三个都很好理解，就是为该类产生无参的构造方法和包含所有参数的构造方法")]),t._v(" "),s("li",[t._v("第二个注解则使用类中所有"),s("strong",[t._v("带有 "),s("code",[t._v("@NonNull")]),t._v(" 注解的或者带有 "),s("code",[t._v("final")]),t._v(" 修饰的成员变量")]),t._v("生成对应的构造方法。成员变量都是非静态的**，另外，如果类中含有 "),s("code",[t._v("final")]),t._v(" 修饰的成员变量，是无法使用 "),s("code",[t._v("@NoArgsConstructor")]),t._v(" 注解**的")]),t._v(" "),s("li",[t._v("三个注解都可以"),s("strong",[t._v("指定")]),t._v("生成的构造方法的"),s("strong",[t._v("访问权限")]),t._v("，同时，第二个注解还可以用 "),s("code",[t._v('@RequiredArgsConstructor(staticName="methodName")')]),t._v(" 的形式生成一个指定名称的静态方法，返回一个调用相应的构造方法产生的对象")])]),t._v(" "),s("h3",{attrs:{id:"allargsconstructor-全参构造方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#allargsconstructor-全参构造方法"}},[t._v("#")]),t._v(" @AllArgsConstructor - 全参构造方法")]),t._v(" "),s("blockquote",[s("p",[t._v("1、注解介绍")])]),t._v(" "),s("p",[t._v("用于自动生成一个包含所有参数的构造方法。")]),t._v(" "),s("p",[t._v("通常，如果你的类有多个属性，你需要手动编写一个构造方法，接受所有这些属性作为参数，然后将它们赋值给对象的属性。而 "),s("code",[t._v("@AllArgsConstructor")]),t._v(" 可以自动帮你生成这个构造方法，大大简化了代码编写。")]),t._v(" "),s("blockquote",[s("p",[t._v("2、特点")])]),t._v(" "),s("ul",[s("li",[t._v("自动生成一个包含所有属性的构造方法。")]),t._v(" "),s("li",[t._v("自动生成的构造方法默认是公共的（public），但你可以通过其他 Lombok 注解来修改它的可见性。")])]),t._v(" "),s("blockquote",[s("p",[t._v("3、属性介绍")])]),t._v(" "),s("p",[s("code",[t._v("@AllArgsConstructor")]),t._v(" 注解没有直接定义的属性，但可以与其他 Lombok 注解结合使用来修改生成的构造方法的行为。")]),t._v(" "),s("p",[t._v("以下是一些常见的属性注解：")]),t._v(" "),s("ul",[s("li",[t._v("AccessLevel：通过设置这个属性，你可以修改生成的构造方法的访问级别。例如，"),s("code",[t._v("@AllArgsConstructor(access = AccessLevel.PRIVATE)")]),t._v(" 将生成一个私有的构造方法。")]),t._v(" "),s("li",[t._v("onConstructor：这个属性允许你为生成的构造方法添加额外的注解。你可以列出需要添加的注解列表。例如，"),s("code",[t._v("@AllArgsConstructor(onConstructor = @__({@Autowired}))")]),t._v(" 可以在生成的构造方法上添加 Spring 的 "),s("code",[t._v("@Autowired")]),t._v(" 注解。")])]),t._v(" "),s("blockquote",[s("p",[t._v("4、代码示例")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@AllArgsConstructor")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" firstName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" lastName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自动生成的构造方法，接受所有属性作为参数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// public Person(String firstName, String lastName, int age) {")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     this.firstName = firstName;")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     this.lastName = lastName;")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     this.age = age;")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// }")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 其他方法和属性...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("h3",{attrs:{id:"requiredargsconstructor-带参构造"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#requiredargsconstructor-带参构造"}},[t._v("#")]),t._v(" @RequiredArgsConstructor - 带参构造")]),t._v(" "),s("p",[s("em",[t._v("需求场景")])]),t._v(" "),s("p",[t._v("当我们使用 "),s("code",[t._v("@Autowired")]),t._v(" 进行 Bean 注入的时候，IDEA 会提示警告，不建议使用此方式进行注入。Spring 官方更推荐使用构造方法进行注入。")]),t._v(" "),s("blockquote",[s("p",[t._v("1、注解介绍")])]),t._v(" "),s("p",[t._v("作用于类，用于生成包含 "),s("code",[t._v("final")]),t._v(" 和 "),s("a",{attrs:{href:"https://blog.csdn.net/qq_39249094/article/details/121009849",target:"_blank",rel:"noopener noreferrer"}},[t._v("@NonNull"),s("OutboundLink")],1),t._v(" 注解的成员变量的构造方法。")]),t._v(" "),s("blockquote",[s("p",[t._v("2、特点")])]),t._v(" "),s("ul",[s("li",[t._v("该注解作用于类上")]),t._v(" "),s("li",[t._v("标记为 "),s("code",[t._v("final")]),t._v(" 的对象，会自动进行注入")]),t._v(" "),s("li",[t._v("使用 lombok 的 "),s("code",[t._v("@NonNull")]),t._v(" 注解标记的对象，会自动进行注入")])]),t._v(" "),s("blockquote",[s("p",[t._v("3、属性介绍")])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("staticName 属性：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("默认情况下，Lombok生成的构造方法是公共的（public），但是通过设置 "),s("code",[t._v("staticName")]),t._v(" 属性，你可以将生成的构造方法设置为私有（private）。")])]),t._v(" "),s("li",[s("p",[t._v("它还允许你自定义静态工厂方法的名称，并且该方法接受一个 "),s("code",[t._v("final")]),t._v(" 和 "),s("code",[t._v("@NonNull")]),t._v(" 注解的参数，返回类型为当前类的对象。")])])])]),t._v(" "),s("li",[s("p",[t._v("access 属性：")]),t._v(" "),s("p",[t._v("这个属性用于设置生成的构造方法的访问修饰符。如果你设置了 "),s("code",[t._v("staticName")]),t._v(" 属性，那么这个属性也会影响到生成的静态工厂方法的访问修饰符。")]),t._v(" "),s("p",[t._v("它支持以下选项：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("PUBLIC")]),t._v("：公共的")]),t._v(" "),s("li",[s("code",[t._v("MODULE")]),t._v("：Java 9 引入的新特性，表示模块可见性")]),t._v(" "),s("li",[s("code",[t._v("PROTECTED")]),t._v("：受保护的")]),t._v(" "),s("li",[s("code",[t._v("PACKAGE")]),t._v("：包私有的")]),t._v(" "),s("li",[s("code",[t._v("PRIVATE")]),t._v("：私有的")]),t._v(" "),s("li",[s("code",[t._v("NONE")]),t._v("：停用注解功能，不生成构造方法也不生成静态方法")])])]),t._v(" "),s("li",[s("p",[t._v("onConstructor 属性：")]),t._v(" "),s("p",[t._v("这个属性允许你为生成的构造方法添加额外的注解。你可以列出需要添加的注解列表。（放在生成的构造方法上）")]),t._v(" "),s("ul",[s("li",[t._v("在 JDK 7 之前，写法是 "),s("code",[t._v("onConstructor = @_({@注解1, @注解2})")])]),t._v(" "),s("li",[t._v("在 JDK 8 及以后，写法是 "),s("code",[t._v("onConstructor = {@注解1, @注解2}")])])])])]),t._v(" "),s("blockquote",[s("p",[t._v("4、代码示例")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用lombok的@RequiredArgsConstructor注解进行注入")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RequiredArgsConstructor")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ZTestController")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CommandLineRunner")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 标记为final的,会自动进行注入")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AliaPay")]),t._v(" aliaPay"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用lombok的@NonNull注解标记的,会自动进行注入")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@NonNull")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JingDongPay")]),t._v(" jingDongPay"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 未标记final或@NonNull,不会进行注入")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeixinPay")]),t._v(" weixinPay"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        aliaPay"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pay")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        jingDongPay"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pay")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("weixinPay "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"WeixinPay注入失败"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br")])]),s("h3",{attrs:{id:"noargsconstructor-无参构造"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#noargsconstructor-无参构造"}},[t._v("#")]),t._v(" @NoArgsConstructor - 无参构造")]),t._v(" "),s("blockquote",[s("p",[t._v("注解介绍")])]),t._v(" "),s("p",[t._v("顾名思义，"),s("code",[t._v("@NoArgsConstructor")]),t._v(" 注解是针对无参数的构造函数，它会生成一个无参数的构造方法。")]),t._v(" "),s("p",[t._v("通常，当你的类没有明确定义构造方法时，编译器会自动创建一个默认的无参数构造方法。但是，如果你在类中定义了任何构造方法（包括有参构造方法），编译器将不再自动生成默认的无参数构造方法。这时，你可以使用 "),s("code",[t._v("@NoArgsConstructor")]),t._v(" 注解来补充生成一个无参数构造方法。")]),t._v(" "),s("p",[s("em",[t._v("主要特点：")])]),t._v(" "),s("ul",[s("li",[t._v("自动生成一个无参数的构造方法。")]),t._v(" "),s("li",[t._v("可以与其他 Lombok 注解一起使用，如 "),s("code",[t._v("@AllArgsConstructor")]),t._v(" 和 "),s("code",[t._v("@RequiredArgsConstructor")]),t._v("，以生成不同类型的构造方法。")])]),t._v(" "),s("h2",{attrs:{id:"学习参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#学习参考"}},[t._v("#")]),t._v(" 学习参考")]),t._v(" "),s("ul",[s("li",[s("p",[s("a",{attrs:{href:"https://www.iocoder.cn/Fight/Lombok-installation-and-Spring-Boot-integration-with-Lombok/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Lombok 安装及 Spring Boot 集成 Lombok | 芋道源码 —— 纯源码解析博客 (iocoder.cn)"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://blog.csdn.net/MHGeek/article/details/100155398",target:"_blank",rel:"noopener noreferrer"}},[t._v("lombok常用注解大全_z|x|y的博客-CSDN博客"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://blog.csdn.net/feyehong/article/details/127077857",target:"_blank",rel:"noopener noreferrer"}},[t._v("SpringBoot 使用lombok的@RequiredArgsConstructor注解进行Bean注入_@requiredargsconstructor 注入为null_fengyehongWorld的博客-CSDN博客"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://blog.csdn.net/qq_39249094/article/details/121028234?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-121028234-blog-127077857.235%5Ev38%5Epc_relevant_default_base3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-121028234-blog-127077857.235%5Ev38%5Epc_relevant_default_base3&utm_relevant_index=5",target:"_blank",rel:"noopener noreferrer"}},[t._v("lombok 基础注解之 @RequiredArgsConstructor_lombok requiredargsconstructor_笑看烟雨红尘的博客-CSDN博客"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://blog.csdn.net/weixin_44903718/article/details/108038487",target:"_blank",rel:"noopener noreferrer"}},[t._v("@Data 使用与介绍_foxscallion的博客-CSDN博客"),s("OutboundLink")],1)])])])])}),[],!1,null,null,null);s.default=e.exports}}]);