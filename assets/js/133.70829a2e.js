(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{506:function(a,s,t){"use strict";t.r(s);var e=t(4),n=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"刷题小记"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#刷题小记"}},[a._v("#")]),a._v(" 刷题小记")]),a._v(" "),s("h2",{attrs:{id:"数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[a._v("#")]),a._v(" 数组")]),a._v(" "),s("p",[a._v("在 Java 中，数组是一种基础的数据结构，提供了一些内部方法来进行操作。")]),a._v(" "),s("p",[a._v("以下是一些常用的数组内部方法：")]),a._v(" "),s("h3",{attrs:{id:"获取数组长度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取数组长度"}},[a._v("#")]),a._v(" 获取数组长度")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("length")]),a._v(": 返回数组的长度。")])]),a._v(" "),s("h3",{attrs:{id:"复制数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#复制数组"}},[a._v("#")]),a._v(" 复制数组")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("System.arraycopy(Object src, int srcPos, Object dest, int destPos, int length)")]),a._v(": 将数组指定范围的元素"),s("strong",[a._v("复制到另一个数组")]),a._v("。")])]),a._v(" "),s("h3",{attrs:{id:"数组排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组排序"}},[a._v("#")]),a._v(" 数组排序")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("Arrays.sort(int[] a)")]),a._v(": 对整型数组进行升序排序。")]),a._v(" "),s("li",[s("code",[a._v("Arrays.sort(char[] a)")]),a._v(": 对字符数组进行升序排序。")]),a._v(" "),s("li",[s("code",[a._v("Arrays.sort(T[] a, Comparator<? super T> c)")]),a._v(": 使用自定义比较器对对象数组进行排序。")])]),a._v(" "),s("h3",{attrs:{id:"数组填充"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组填充"}},[a._v("#")]),a._v(" 数组填充")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("Arrays.fill(int[] a, int val)")]),a._v(": 将整型数组的所有元素都设置为指定值。")]),a._v(" "),s("li",[s("code",[a._v("Arrays.fill(char[] a, char val)")]),a._v(": 将字符数组的所有元素都设置为指定值。")])]),a._v(" "),s("h3",{attrs:{id:"查找元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查找元素"}},[a._v("#")]),a._v(" 查找元素")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("Arrays.binarySearch(int[] a, int key)")]),a._v(": 对升序数组进行二分查找，找到返回索引，否则返回负数。")])]),a._v(" "),s("h3",{attrs:{id:"数组转换为字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组转换为字符串"}},[a._v("#")]),a._v(" 数组转换为字符串")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("Arrays.toString(type[] a)")]),a._v(": 返回数组的字符串表示。")])]),a._v(" "),s("h3",{attrs:{id:"数组拷贝"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组拷贝"}},[a._v("#")]),a._v(" 数组拷贝")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("Arrays.copyOf(type[] original, int newLength)")]),a._v(": 复制指定数组的指定长度。")]),a._v(" "),s("li",[s("code",[a._v("Arrays.copyOfRange(type[] original, int from, int to)")]),a._v(": 复制指定数组的指定范围。")])]),a._v(" "),s("h3",{attrs:{id:"数组填充-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组填充-2"}},[a._v("#")]),a._v(" 数组填充")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("Arrays.fill(type[] a, type val)")]),a._v(": 用指定的值填充整个数组。")])]),a._v(" "),s("h3",{attrs:{id:"使用指定的生成器函数生成数组的每个元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用指定的生成器函数生成数组的每个元素"}},[a._v("#")]),a._v(" 使用指定的生成器函数生成数组的每个元素")]),a._v(" "),s("p",[s("strong",[a._v("Arrays.setAll()：")])]),a._v(" "),s("ul",[s("li",[s("code",[a._v("Arrays.setAll(T[] array, IntUnaryOperator generator)")]),a._v(": 使用指定的生成器函数生成数组的每个元素。")]),a._v(" "),s("li",[a._v("这个方法接受一个 "),s("code",[a._v("IntUnaryOperator")]),a._v(" 函数接口作为参数，该函数接受一个索引，返回对应索引位置上元素的值。")])]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" array "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("setAll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 现在 array = [0, 1, 4, 9, 16]")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h3",{attrs:{id:"在一个已排序的数组中搜索指定元素-并返回返回元素在数组中的索引"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在一个已排序的数组中搜索指定元素-并返回返回元素在数组中的索引"}},[a._v("#")]),a._v(" 在一个已排序的数组中搜索指定元素，并返回返回元素在数组中的索引")]),a._v(" "),s("p",[s("code",[a._v("Arrays.binarySearch(arr, element)")]),a._v(" 是用于在一个已排序的数组 "),s("code",[a._v("arr")]),a._v(" 中搜索指定元素 "),s("code",[a._v("element")]),a._v(" 的方法。")]),a._v(" "),s("ul",[s("li",[a._v("这个方法返回元素在数组中的索引，")]),a._v(" "),s("li",[a._v("如果找不到元素则返回负数。")])]),a._v(" "),s("p",[a._v("方法签名为：")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("binarySearch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" type key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("其中，"),s("code",[a._v("arr")]),a._v(" 是要搜索的数组，"),s("code",[a._v("key")]),a._v(" 是要查找的元素。")]),a._v(" "),s("p",[a._v("注意事项：")]),a._v(" "),s("ul",[s("li",[a._v("如果数组包含多个相等的元素，无法保证返回的是哪一个元素的索引。")]),a._v(" "),s("li",[a._v("如果数组中"),s("strong",[a._v("不存在")]),a._v("指定的元素，返回的是一个"),s("strong",[a._v("负数")]),a._v("，表示元素应该插入数组中的位置，插入后数组仍保持有序。")])]),a._v(" "),s("p",[a._v("示例：")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" array "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" index "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("binarySearch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// index 的值为 2，因为元素 3 在数组中的索引为 2")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("p",[a._v("如果数组中"),s("strong",[a._v("不存在")]),a._v("要查找的元素，返回的值将是负数。")]),a._v(" "),s("p",[a._v("要获得正确的插入点，可以使用以下方式：")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" array "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" key "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" index "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("binarySearch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// index 的值为 -3，表示如果要插入元素 3，它应该插入到索引为 2 的位置")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("blockquote",[s("p",[a._v("注意：在使用 "),s("code",[a._v("binarySearch")]),a._v(" 方法之前，数组必须是有序的，否则结果是不确定的。如果数组无序，可以使用 "),s("code",[a._v("Arrays.sort()")]),a._v(" 对数组进行排序。")])]),a._v(" "),s("h2",{attrs:{id:"位运算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#位运算"}},[a._v("#")]),a._v(" 位运算")]),a._v(" "),s("p",[a._v("在计算机中，位运算是指对二进制数进行的运算。Java中提供了位运算符来进行位运算操作，包括**按位与（&）、按位或（|）、按位异或（^）、按位取反（~）、左移位（<<）和右移位（>>）**等。")]),a._v(" "),s("p",[a._v("下面简单介绍一下位运算符的功能和使用方法：")]),a._v(" "),s("h3",{attrs:{id:"_1-按位与"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-按位与"}},[a._v("#")]),a._v(" 1.按位与（&）")]),a._v(" "),s("p",[a._v("对两个二进制数进行位运算，如果"),s("strong",[a._v("两个数对应位都是 1，则结果为 1")]),a._v("，否则为 0。例如：")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0b1010")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 二进制数1010")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0b1100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 二进制数1100")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 按位与运算，结果为1000（二进制）")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h3",{attrs:{id:"_2-按位或"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-按位或"}},[a._v("#")]),a._v(" 2.按位或（|）")]),a._v(" "),s("p",[a._v("对两个二进制数进行位运算，如果"),s("strong",[a._v("两个数对应位都是 0，则结果为 0")]),a._v("，否则为 1。例如：")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0b1010")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 二进制数1010")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0b1100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 二进制数1100")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 按位或运算，结果为1110（二进制）")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h3",{attrs:{id:"_3-按位异或"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-按位异或"}},[a._v("#")]),a._v(" 3.按位异或（^）")]),a._v(" "),s("p",[a._v("对两个二进制数进行位运算，如果"),s("strong",[a._v("两个数对应位相同，则结果为 0")]),a._v("，否则为 1。例如：")]),a._v(" "),s("ul",[s("li",[a._v("相同为 0，不同为 1")])]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0b1010")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 二进制数1010")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0b1100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 二进制数1100")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("^")]),a._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 按位异或运算，结果为0110（二进制）")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h4",{attrs:{id:"integer-bitcount-x-y"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#integer-bitcount-x-y"}},[a._v("#")]),a._v(" Integer.bitCount(x ^ y)")]),a._v(" "),s("p",[a._v("bitCount 实现的功能是计算一个（byte,short,char,int统一按照int方法计算）int, long 类型的数值在"),s("strong",[a._v("二进制下 “1” 的数量")]),a._v("。")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 求汉明距离")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Solution")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("hammingDistance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("bitCount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("^")]),a._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("h3",{attrs:{id:"_4-按位取反"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-按位取反"}},[a._v("#")]),a._v(" 4.按位取反（~）")]),a._v(" "),s("p",[a._v("对一个二进制数进行位运算，"),s("strong",[a._v("将所有的 0 变为 1，将所有的 1 变为 0")]),a._v("。例如：")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0b1010")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 二进制数1010")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("~")]),a._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 按位取反运算，结果为0101（二进制）")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h3",{attrs:{id:"_5-左移位-乘"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-左移位-乘"}},[a._v("#")]),a._v(" 5.左移位（<<）-- 乘")]),a._v(" "),s("p",[a._v("将一个二进制数向左移动指定的位数，移动后右侧"),s("strong",[a._v("补 0")]),a._v("。例如：")]),a._v(" "),s("ul",[s("li",[a._v("左移一位，数变大，相当于乘于 2")])]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0b1010")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 二进制数1010")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<<")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 左移2位，结果为101000（二进制）")]),a._v("\n\nsize "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<<")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 左移一相当于乘于2")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("h3",{attrs:{id:"_6-右移位-除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-右移位-除"}},[a._v("#")]),a._v(" 6.右移位（>>）-- 除")]),a._v(" "),s("p",[a._v("将一个二进制数向右移动指定的位数，移动后左侧"),s("strong",[a._v("补 0")]),a._v("。例如：")]),a._v(" "),s("ul",[s("li",[a._v("左移一位，数变大，相当于除于 2")])]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0b1010")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 二进制数1010")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 右移2位，结果为0010（二进制）")]),a._v("\n\nsize "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 右移一相当于除于2")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("blockquote",[s("ul",[s("li",[a._v("需要注意的是，"),s("strong",[a._v("位运算符只能用于整数类型（byte、short、int、long）的数据")]),a._v("。")]),a._v(" "),s("li",[a._v("另外，在进行位运算时，需要特别注意"),s("strong",[a._v("数据类型的符号位")]),a._v("，因为有些位运算符（如右移位运算符）会保留符号位。")])])]),a._v(" "),s("h3",{attrs:{id:"异或性质"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异或性质"}},[a._v("#")]),a._v(" 异或性质：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("1.任何数和 0 做异或运算，结果仍然是原来的数，即 a⊕0=a。\n\n2.任何数和其自身做异或运算，结果是 a⊕a=0。\n\n3.异或运算满足交换律和结合律，即a⊕b⊕a=b⊕a⊕a=b⊕(a⊕a)=b⊕0=b。 \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("h3",{attrs:{id:"问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[a._v("#")]),a._v(" 问题")]),a._v(" "),s("h4",{attrs:{id:"为什么-5-右移一位是-3-而-5-2-是-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么-5-右移一位是-3-而-5-2-是-2"}},[a._v("#")]),a._v(" 为什么 -5 右移一位是 -3，而 -5/2 是 -2")]),a._v(" "),s("p",[s("em",[a._v("-3 的由来")])]),a._v(" "),s("p",[a._v("这是由于负数的二进制表示以及右移操作的工作原理所导致的。在计算机中，负数通常以二进制的补码形式表示。")]),a._v(" "),s("p",[a._v("首先，让我们来看看 -5 的二进制表示：")]),a._v(" "),s("ul",[s("li",[a._v("正数5的二进制表示是：00000101。")]),a._v(" "),s("li",[a._v("负数的补码表示是将对应正数的二进制取反（将 0 变成 1，将 1 变成 0），然后加 1。所以 -5 的补码表示是：11111011。")])]),a._v(" "),s("p",[a._v("现在，让我们将 -5 右移一位：")]),a._v(" "),s("ul",[s("li",[a._v("右移一位后，最高位（符号位）仍然为 1，表示这仍然是一个负数。")]),a._v(" "),s("li",[a._v("新的补码表示是：11111101。")])]),a._v(" "),s("p",[a._v("接下来，我们将这个补码转换回十进制，就得到了 -3。")]),a._v(" "),s("p",[s("strong",[a._v("按位操作和除法操作是不一样的。")])]),a._v(" "),s("h2",{attrs:{id:"string-类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-类"}},[a._v("#")]),a._v(" String 类")]),a._v(" "),s("p",[s("code",[a._v("String")]),a._v(" 类是 Java 中的一个基础类，提供了许多有用的方法来操作字符串。")]),a._v(" "),s("p",[a._v("以下是一些常用的 "),s("code",[a._v("String")]),a._v(" 内部方法：")]),a._v(" "),s("h3",{attrs:{id:"获取字符串长度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取字符串长度"}},[a._v("#")]),a._v(" 获取字符串长度")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("length()")]),a._v(": 返回字符串的长度。")])]),a._v(" "),s("h3",{attrs:{id:"获取字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取字符"}},[a._v("#")]),a._v(" 获取字符")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("charAt(int index)")]),a._v(": 返回指定索引处的字符。")])]),a._v(" "),s("h3",{attrs:{id:"子串操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#子串操作"}},[a._v("#")]),a._v(" 子串操作")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("substring(int beginIndex)")]),a._v(": 返回从指定索引开始到字符串末尾的子字符串。（包含索引为 beginIndex 的元素）")]),a._v(" "),s("li",[s("code",[a._v("substring(int beginIndex, int endIndex)")]),a._v(": 返回从指定索引开始到指定索引结束的子字符串。（不包含索引为 endIndex 的元素）")])]),a._v(" "),s("h3",{attrs:{id:"连接字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#连接字符串"}},[a._v("#")]),a._v(" 连接字符串")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("concat(String str)")]),a._v(": 将指定字符串连接到此字符串的末尾。")])]),a._v(" "),s("h3",{attrs:{id:"查找子字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查找子字符串"}},[a._v("#")]),a._v(" 查找子字符串")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("indexOf(String str)")]),a._v(": 返回指定子字符串在此字符串中第一次出现的索引。")]),a._v(" "),s("li",[s("code",[a._v("lastIndexOf(String str)")]),a._v(": 返回指定子字符串在此字符串中最后一次出现的索引。")])]),a._v(" "),s("h3",{attrs:{id:"字符串比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串比较"}},[a._v("#")]),a._v(" 字符串比较")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("equals(Object obj)")]),a._v(": 将此字符串与指定对象进行比较。")]),a._v(" "),s("li",[s("code",[a._v("equalsIgnoreCase(String anotherString)")]),a._v(": 按字典顺序比较两个字符串，不考虑大小写。")])]),a._v(" "),s("h3",{attrs:{id:"字符串替换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串替换"}},[a._v("#")]),a._v(" 字符串替换")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("replace(char oldChar, char newChar)")]),a._v(": 返回一个新字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。")])]),a._v(" "),s("h3",{attrs:{id:"字符串分割"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串分割"}},[a._v("#")]),a._v(" 字符串分割")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("split(String regex)")]),a._v(": 根据给定正则表达式的匹配拆分此字符串。")]),a._v(" "),s("li",[s("code",[a._v("split(String regex, int limit)")]),a._v(": 根据给定正则表达式的匹配拆分此字符串，最多拆分出 limit 个子字符串。")])]),a._v(" "),s("h3",{attrs:{id:"字符串转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串转换"}},[a._v("#")]),a._v(" 字符串转换")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("toLowerCase()")]),a._v(": 将此字符串转换为小写。")]),a._v(" "),s("li",[s("code",[a._v("toUpperCase()")]),a._v(": 将此字符串转换为大写。")])]),a._v(" "),s("h3",{attrs:{id:"去除空格"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#去除空格"}},[a._v("#")]),a._v(" 去除空格")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("trim()")]),a._v(": 返回一个字符串，其值为此字符串，并删除了所有前导空白和尾部空白。")])]),a._v(" "),s("h2",{attrs:{id:"链表-linkedlist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链表-linkedlist"}},[a._v("#")]),a._v(" 链表 LinkedList")]),a._v(" "),s("p",[a._v("常用方法如下：")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("add(E e)")]),a._v(": 将元素添加到链表。")]),a._v(" "),s("li",[s("code",[a._v("remove(E e)")]),a._v(": 从链表中移除指定元素。")]),a._v(" "),s("li",[s("code",[a._v("get(int index)")]),a._v(": 获取链表中指定索引处的元素。")]),a._v(" "),s("li",[s("code",[a._v("size()")]),a._v(": 返回链表的大小。")])]),a._v(" "),s("h2",{attrs:{id:"哈希表-hashmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈希表-hashmap"}},[a._v("#")]),a._v(" 哈希表 HashMap")]),a._v(" "),s("p",[a._v("常用方法如下：")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("put(K key, V value)")]),a._v(": 将键值对存入哈希表。")]),a._v(" "),s("li",[s("code",[a._v("get(K key)")]),a._v(": 获取键对应的值。")]),a._v(" "),s("li",[s("code",[a._v("containsKey(K key)")]),a._v(": 判断是否包含指定键。")]),a._v(" "),s("li",[s("code",[a._v("remove(K key)")]),a._v(": 移除指定键的映射。")]),a._v(" "),s("li",[s("code",[a._v("keySet()")]),a._v(": 返回哈希表中所有键的集合。")])]),a._v(" "),s("h2",{attrs:{id:"集合-hashset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集合-hashset"}},[a._v("#")]),a._v(" 集合 HashSet")]),a._v(" "),s("p",[a._v("常用方法如下：")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("add(E e)")]),a._v(": 将元素添加到集合。")]),a._v(" "),s("li",[s("code",[a._v("remove(E e)")]),a._v(": 从集合中移除指定元素。")]),a._v(" "),s("li",[s("code",[a._v("contains(E e)")]),a._v(": 判断集合是否包含指定元素。")])]),a._v(" "),s("h2",{attrs:{id:"队列-queue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#队列-queue"}},[a._v("#")]),a._v(" 队列 queue")]),a._v(" "),s("p",[a._v("在 Java 中，"),s("code",[a._v("Queue")]),a._v(" 是一个接口，它表示队列的基本行为，即一个先进先出（FIFO）的数据结构。"),s("code",[a._v("Queue")]),a._v(" 接口定义了一组方法，用于操作队列，这些方法包括：")]),a._v(" "),s("h3",{attrs:{id:"_1-queue-poll"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-queue-poll"}},[a._v("#")]),a._v(" 1.queue.poll()")]),a._v(" "),s("p",[s("code",[a._v("queue.poll()")]),a._v(" 是 Java 中 "),s("code",[a._v("Queue")]),a._v(" 接口定义的一个方法，用于"),s("strong",[a._v("获取")]),a._v("并移除队列的头部元素，如果队列为空则返回 "),s("code",[a._v("null")]),a._v("。")]),a._v(" "),s("h3",{attrs:{id:"_2-queue-add"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-queue-add"}},[a._v("#")]),a._v(" 2.queue.add()")]),a._v(" "),s("p",[s("code",[a._v("add(E e)")]),a._v("：将指定元素插入队列中，如果队列已满，则抛出一个 "),s("code",[a._v("IllegalStateException")]),a._v(" 异常。")]),a._v(" "),s("h3",{attrs:{id:"_3-queue-offer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-queue-offer"}},[a._v("#")]),a._v(" 3.queue.offer()")]),a._v(" "),s("p",[s("code",[a._v("offer(E e)")]),a._v("：将指定元素"),s("strong",[a._v("插入")]),a._v("队列中，如果队列已满，则返回 "),s("code",[a._v("false")]),a._v("。")]),a._v(" "),s("h3",{attrs:{id:"_4-queue-remove"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-queue-remove"}},[a._v("#")]),a._v(" 4.queue.remove()")]),a._v(" "),s("p",[s("code",[a._v("remove()")]),a._v("：获取并移除队列头部的元素，如果队列为空，则抛出一个 "),s("code",[a._v("NoSuchElementException")]),a._v(" 异常。")]),a._v(" "),s("h3",{attrs:{id:"_5-queue-element"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-queue-element"}},[a._v("#")]),a._v(" 5.queue.element()")]),a._v(" "),s("p",[s("code",[a._v("element()")]),a._v("：获取但不移除队列头部的元素，如果队列为空，则抛出一个 "),s("code",[a._v("NoSuchElementException")]),a._v(" 异常。")]),a._v(" "),s("h3",{attrs:{id:"_6-queue-peek"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-queue-peek"}},[a._v("#")]),a._v(" 6.queue.peek()")]),a._v(" "),s("p",[s("code",[a._v("peek()")]),a._v("：获取但不移除队列头部的元素，如果队列为空，则返回 "),s("code",[a._v("null")]),a._v("。")]),a._v(" "),s("p",[a._v("此外，"),s("code",[a._v("Queue")]),a._v(" 接口还扩展了 "),s("code",[a._v("Collection")]),a._v(" 接口，因此还可以使用 "),s("code",[a._v("size()")]),a._v("、"),s("code",[a._v("isEmpty()")]),a._v("、"),s("code",[a._v("contains(Object o)")]),a._v("、"),s("code",[a._v("iterator()")]),a._v("、"),s("code",[a._v("toArray()")]),a._v(" 等方法。")]),a._v(" "),s("p",[a._v("在 Java 中，"),s("code",[a._v("Queue")]),a._v(" 接口有多个实现类，包括：")]),a._v(" "),s("ol",[s("li",[s("code",[a._v("ArrayDeque")]),a._v("：基于数组实现的双端队列。")]),a._v(" "),s("li",[s("code",[a._v("LinkedList")]),a._v("：基于链表实现的队列。")]),a._v(" "),s("li",[s("code",[a._v("PriorityQueue")]),a._v("：基于堆实现的优先队列。")])]),a._v(" "),s("p",[a._v("不同的实现类可能会有不同的方法和行为，但它们都实现了 "),s("code",[a._v("Queue")]),a._v(" 接口，因此都支持上述的方法和行为。")]),a._v(" "),s("h3",{attrs:{id:"代码示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码示例"}},[a._v("#")]),a._v(" 代码示例")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * 层序遍历方式反转（也相当于广度优先）\n */")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TreeNode")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("invertTreeByQueue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TreeNode")]),a._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("root "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Queue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TreeNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" queue "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ArrayDeque")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 插入")]),a._v("\n    queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("offer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("while")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("isEmpty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 弹出")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TreeNode")]),a._v(" node "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("poll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TreeNode")]),a._v(" temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("left "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" temp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("left "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 插入左节点")]),a._v("\n            queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("offer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 插入右节点")]),a._v("\n            queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("offer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br")])]),s("h2",{attrs:{id:"双端队列-deque"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双端队列-deque"}},[a._v("#")]),a._v(" 双端队列 Deque")]),a._v(" "),s("p",[a._v("在 Java 中，Deque 接口（双端队列）有以下一些常用的方法：")]),a._v(" "),s("h3",{attrs:{id:"插入操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插入操作"}},[a._v("#")]),a._v(" 插入操作")]),a._v(" "),s("ul",[s("li",[a._v("addFirst(E e) 或 offerFirst(E e): 在队头插入元素。")]),a._v(" "),s("li",[a._v("addLast(E e) 或 offerLast(E e): 在队尾插入元素。")])]),a._v(" "),s("h3",{attrs:{id:"移除操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#移除操作"}},[a._v("#")]),a._v(" 移除操作")]),a._v(" "),s("ul",[s("li",[a._v("removeFirst() 或 pollFirst(): 移除并返回队头的元素。")]),a._v(" "),s("li",[a._v("removeLast() 或 pollLast(): 移除并返回队尾的元素。")])]),a._v(" "),s("h3",{attrs:{id:"访问操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#访问操作"}},[a._v("#")]),a._v(" 访问操作")]),a._v(" "),s("ul",[s("li",[a._v("getFirst() 或 peekFirst(): 获取但不移除队头的元素。")]),a._v(" "),s("li",[a._v("getLast() 或 peekLast(): 获取但不移除队尾的元素。")])]),a._v(" "),s("h3",{attrs:{id:"其他操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他操作"}},[a._v("#")]),a._v(" 其他操作")]),a._v(" "),s("ul",[s("li",[a._v("size(): 返回队列的大小。")]),a._v(" "),s("li",[a._v("isEmpty(): 判断队列是否为空。")]),a._v(" "),s("li",[a._v("clear(): 清空队列。")])]),a._v(" "),s("p",[a._v("这些方法允许你在双端队列的两端执行插入、移除和访问操作，使得双端队列在解决算法问题时非常灵活。在题解中，你可能会经常看到这些方法的使用，尤其是在实现"),s("strong",[a._v("滑动窗口")]),a._v("等问题时。")]),a._v(" "),s("h2",{attrs:{id:"优先队列-priorityqueue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优先队列-priorityqueue"}},[a._v("#")]),a._v(" 优先队列 PriorityQueue")]),a._v(" "),s("p",[a._v("常用方法如下：")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("add(E e)")]),a._v(" 或 "),s("code",[a._v("offer(E e)")]),a._v(": 将元素插入队列。")]),a._v(" "),s("li",[s("code",[a._v("poll()")]),a._v(": 移除并返回队列中最小（或最大）的元素。")]),a._v(" "),s("li",[s("code",[a._v("peek()")]),a._v(": 获取但不移除队列中最小（或最大）的元素。")]),a._v(" "),s("li",[s("code",[a._v("size()")]),a._v(": 返回队列的大小。")])]),a._v(" "),s("h2",{attrs:{id:"栈stack"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈stack"}},[a._v("#")]),a._v(" 栈stack")]),a._v(" "),s("p",[a._v("在 Java 中，"),s("code",[a._v("Stack")]),a._v(" 是一个 LIFO（后进先出）的数据结构，它继承自 "),s("code",[a._v("Vector")]),a._v(" 类，同时也实现了 "),s("code",[a._v("List")]),a._v(" 接口。")]),a._v(" "),s("p",[s("strong",[a._v("虽然 "),s("code",[a._v("Stack")]),a._v(" 类在 Java 中仍然可用，但是在 Java SE 5 中，推荐使用 "),s("code",[a._v("Deque")]),a._v(" 接口的实现类 "),s("code",[a._v("LinkedList")]),a._v(" 来代替 "),s("code",[a._v("Stack")]),a._v(" 类，因为 "),s("code",[a._v("LinkedList")]),a._v(" 类实现了 "),s("code",[a._v("Deque")]),a._v(" 接口，提供了与 "),s("code",[a._v("Stack")]),a._v(" 类相同的方法，并且更加高效。")])]),a._v(" "),s("p",[a._v("常用方法如下：")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("push(E item)")]),a._v(": 将元素压入栈顶。")]),a._v(" "),s("li",[s("code",[a._v("pop()")]),a._v(": 弹出并返回栈顶元素。")]),a._v(" "),s("li",[s("code",[a._v("peek()")]),a._v(": 获取但不移除栈顶元素。")]),a._v(" "),s("li",[s("code",[a._v("empty()")]),a._v(": 判断栈是否为空。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);