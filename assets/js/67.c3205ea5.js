(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{441:function(t,v,_){"use strict";_.r(v);var a=_(4),r=Object(a.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"一、网站内容"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、网站内容"}},[t._v("#")]),t._v(" 一、网站内容")]),t._v(" "),v("h2",{attrs:{id:"我们的会议你大大大"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#我们的会议你大大大"}},[t._v("#")]),t._v(" 我们的会议你大大大")]),t._v(" "),v("h2",{attrs:{id:"我们的会议你大大大-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#我们的会议你大大大-2"}},[t._v("#")]),t._v(" 我们的会议你大大大")]),t._v(" "),v("h2",{attrs:{id:"我们的会议你大大大-3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#我们的会议你大大大-3"}},[t._v("#")]),t._v(" 我们的会议你大大大")]),t._v(" "),v("h2",{attrs:{id:"一、网站内容你好啊啊啊啊"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、网站内容你好啊啊啊啊"}},[t._v("#")]),t._v(" 一、网站内容你好啊啊啊啊")]),t._v(" "),v("h2",{attrs:{id:"一、网站内容-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、网站内容-2"}},[t._v("#")]),t._v(" 一、网站内容")]),t._v(" "),v("h2",{attrs:{id:"一、网站内容-3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、网站内容-3"}},[t._v("#")]),t._v(" 一、网站内容")]),t._v(" "),v("h2",{attrs:{id:"一、网站内容-4"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、网站内容-4"}},[t._v("#")]),t._v(" 一、网站内容")]),t._v(" "),v("p",[t._v("编程语言如同数字时代的砖瓦，其语言的组成是构建世界的工具，每一行代码都是你亲手搭建的未来城堡。")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://www.processon.com/v/673d443db9adca1540d5f678?cid=67205a336b5a4a4adda4fe93",target:"_blank",rel:"noopener noreferrer"}},[t._v("在线查看思维导图"),v("OutboundLink")],1)]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"img","data-src":"https://raw.githubusercontent.com/gemini-ming/drawingBed/main/xmind/202411201032809.png",loading:"lazy"}})]),t._v(" "),v("p",[t._v("编程语言大体如同治学之道，分为**道（规则与原则）、器（工具与方法）、术（运用与实现）**三大类。道为其根，定义语言规范与特性；器为其形，提供数据、控制、模块化与工具支持；术为其用，贯穿逻辑、对象、并发与异常之应用。得其要领，条分缕析，语言之学，虽广而易知也。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("组成部分")]),t._v(" "),v("th",[t._v("作用")]),t._v(" "),v("th",[t._v("原理")]),t._v(" "),v("th",[t._v("Java中的使用方法")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("语法规则")]),t._v(" "),v("td",[t._v("定义程序的编写方式，保证代码符合语言规范。")]),t._v(" "),v("td",[t._v("语法解析器（Parser）通过上下文无关文法对代码进行语法分析，生成抽象语法树（AST），为后续编译或解释提供基础。")]),t._v(" "),v("td",[t._v("Java代码遵循严格的语法规则，Java编译器根据语法生成字节码。")])]),t._v(" "),v("tr",[v("td",[t._v("数据类型")]),t._v(" "),v("td",[t._v("提供数据存储和处理的基本单位，如数字、字符串、布尔值等。")]),t._v(" "),v("td",[t._v("数据类型通过内存分配和管理模型，定义变量的存储方式、有效操作及限制（如整型用定长字节，字符串用动态内存等）。")]),t._v(" "),v("td",[t._v("Java有强类型系统，常见的数据类型有int、String、boolean等。")])]),t._v(" "),v("tr",[v("td",[t._v("变量与作用域")]),t._v(" "),v("td",[t._v("存储数据值，用于在程序中重用；作用域控制变量的可见性和生命周期。")]),t._v(" "),v("td",[t._v("变量通过内存地址映射到存储单元，作用域由编译器解析代码块的边界和栈帧来限制访问范围。")]),t._v(" "),v("td",[t._v("在Java中，局部变量的作用域局限于方法或代码块，而实例变量属于类。")])]),t._v(" "),v("tr",[v("td",[t._v("运算符与表达式")]),t._v(" "),v("td",[t._v("提供计算和数据操作能力，如算术运算、比较运算和逻辑运算。")]),t._v(" "),v("td",[t._v("运算符通过中缀表达式或后缀表达式在运行时调用底层硬件指令或库函数执行计算，并根据操作数类型进行类型推导或转换。")]),t._v(" "),v("td",[t._v("Java支持算术、逻辑、比较运算符，表达式进行计算并返回结果。")])]),t._v(" "),v("tr",[v("td",[t._v("控制结构")]),t._v(" "),v("td",[t._v("决定程序执行的流程，如条件判断（if）和循环（for、while）。")]),t._v(" "),v("td",[t._v("通过条件跳转指令（如 goto）和栈操作实现代码块的分支和迭代，动态改变程序执行路径。")]),t._v(" "),v("td",[t._v("Java提供if、switch、for、while等控制结构，控制程序流。")])]),t._v(" "),v("tr",[v("td",[t._v("函数与模块化")]),t._v(" "),v("td",[t._v("组织代码的基本单位，支持代码复用和逻辑分离；模块化提供独立的功能单元。")]),t._v(" "),v("td",[t._v("函数通过堆栈调用、参数传递和返回值机制执行；模块通过命名空间隔离和符号链接管理功能导入与依赖关系。")]),t._v(" "),v("td",[t._v("Java的函数通过方法定义和调用，模块化通过类和包实现。")])]),t._v(" "),v("tr",[v("td",[t._v("面向对象特性")]),t._v(" "),v("td",[t._v("支持抽象、继承、多态等特性，增强代码复用性和可维护性。")]),t._v(" "),v("td",[t._v("基于类和对象的内存布局设计，继承通过虚表（vtable）实现方法调用的动态分派，多态允许运行时绑定具体实现。")]),t._v(" "),v("td",[t._v("Java实现类与对象，支持继承、接口、多态等面向对象特性。")])]),t._v(" "),v("tr",[v("td",[t._v("异常处理")]),t._v(" "),v("td",[t._v("捕获和处理程序运行时的错误，提高程序健壮性。")]),t._v(" "),v("td",[t._v("通过捕获异常时的上下文（栈帧）信息和异常传播机制，将错误转交给合适的处理器，防止程序崩溃。")]),t._v(" "),v("td",[t._v("Java使用try-catch-finally块处理异常，抛出自定义异常。")])]),t._v(" "),v("tr",[v("td",[t._v("标准库与工具链")]),t._v(" "),v("td",[t._v("提供基础功能（如 I/O、数据结构、算法）的预定义模块，提升开发效率。")]),t._v(" "),v("td",[t._v("标准库通过动态链接或静态链接嵌入程序中，工具链包括编译器、链接器、调试器等，用于代码的转换、优化和调试。")]),t._v(" "),v("td",[t._v("Java标准库提供了丰富的工具包，如java.util、java.io等。")])]),t._v(" "),v("tr",[v("td",[t._v("内存管理")]),t._v(" "),v("td",[t._v("控制内存分配与回收，避免内存泄漏与资源浪费。")]),t._v(" "),v("td",[t._v("静态内存通过编译时分配，动态内存依赖堆管理器（如 malloc/free），高级语言多用垃圾回收机制（GC）自动回收不再使用的内存。")]),t._v(" "),v("td",[t._v("Java使用垃圾回收机制（GC）自动管理内存，不需要手动释放内存。")])]),t._v(" "),v("tr",[v("td",[t._v("并发与多线程")]),t._v(" "),v("td",[t._v("提升程序性能，允许同时执行多个任务。")]),t._v(" "),v("td",[t._v("基于线程模型和共享内存，依赖线程调度器和同步机制（如锁、信号量）管理资源竞争；协程基于事件循环实现非阻塞并发。")]),t._v(" "),v("td",[t._v("Java通过Thread类和ExecutorService进行线程管理，支持并发编程。")])]),t._v(" "),v("tr",[v("td",[t._v("输入输出（I/O）")]),t._v(" "),v("td",[t._v("与外部环境交互，处理文件、网络或设备的数据读写。")]),t._v(" "),v("td",[t._v("I/O 通过系统调用（如 read/write）与操作系统通信，底层通过缓冲区和设备驱动与硬件交互。")]),t._v(" "),v("td",[t._v("Java通过java.io和java.nio包进行文件、网络等输入输出操作。")])]),t._v(" "),v("tr",[v("td",[t._v("开发工具链")]),t._v(" "),v("td",[t._v("提供代码编写、调试、构建和部署的支持工具，如 IDE、构建工具（Maven、Gradle）等。")]),t._v(" "),v("td",[t._v("工具链通过解析源代码、调用编译器、生成可执行文件并提供错误信息或分析数据，优化开发效率并缩短反馈周期。")]),t._v(" "),v("td",[t._v("Java开发中使用IDE（如IntelliJ IDEA）和构建工具（如Maven）。")])])])])])}),[],!1,null,null,null);v.default=r.exports}}]);