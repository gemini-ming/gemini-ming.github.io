(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{480:function(n,t,s){"use strict";s.r(t);var a=s(4),r=Object(a.a)({},(function(){var n=this._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h1",{attrs:{id:"泛型程序设计"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#泛型程序设计"}},[this._v("#")]),this._v(" 泛型程序设计")]),this._v(" "),n("p",[this._v("8.1　为什么要使用泛型程序设计 326\n8.1.1　类型参数的好处 326\n8.1.2　谁想成为泛型程序员 328\n8.2　定义简单泛型类 328\n8.3　泛型方法 330\n8.4　类型变量的限定 331\n8.5　泛型代码和虚拟机 333\n8.5.1　类型擦除 333\n8.5.2　转换泛型表达式 335\n8.5.3　转换泛型方法 335\n8.5.4　调用遗留代码 337\n8.6　限制与局限性 338\n8.6.1　不能用基本类型实例化类型参数 338\n8.6.2　运行时类型查询只适用于原始类型 338\n8.6.3　不能创建参数化类型的数组 338\n8.6.4　Varargs警告 339\n8.6.5　不能实例化类型变量 340\n8.6.6　不能构造泛型数组 341\n8.6.7　泛型类的静态上下文中类型变量无效 342\n8.6.8　不能抛出或捕获泛型类的实例 343\n8.6.9　可以取消对检查型异常的检查 343\n8.6.10　注意擦除后的冲突 345\n8.7　泛型类型的继承规则 346\n8.8　通配符类型 348\n8.8.1　通配符概念 348\n8.8.2　通配符的超类型限定 349\n8.8.3　无限定通配符 351\n8.8.4　通配符捕获 352\n8.9　反射和泛型 354\n8.9.1　泛型Class类 354\n8.9.2　使用"),n("code",[this._v("Class<T>")]),this._v("参数进行类型匹配 355\n8.9.3　虚拟机中的泛型类型信息 356\n8.9.4　类型字面量 359")])])}),[],!1,null,null,null);t.default=r.exports}}]);