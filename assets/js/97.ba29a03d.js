(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{472:function(n,t,s){"use strict";s.r(t);var a=s(4),e=Object(a.a)({},(function(){var n=this._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h1",{attrs:{id:"继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[this._v("#")]),this._v(" 继承")]),this._v(" "),n("p",[this._v("5.1　类、超类和子类 155\n5.1.1　定义子类 155\n5.1.2　覆盖方法 157\n5.1.3　子类构造器 158\n5.1.4　继承层次 162\n5.1.5　多态 162\n5.1.6　理解方法调用 163\n5.1.7　阻止继承：f?inal类和方法 165\n5.1.8　强制类型转换 166\n5.1.9　抽象类 168\n5.1.10　受保护访问 173\n5.2　Object：所有类的超类 174\n5.2.1　Object类型的变量 174\n5.2.2　equals方法 175\n5.2.3　相等测试与继承 176\n5.2.4　hashCode方法 179\n5.2.5　toString方法 181\n5.3　泛型数组列表 186\n5.3.1　声明数组列表 187\n5.3.2　访问数组列表元素 189\n5.3.3　类型化与原始数组列表的\n兼容性 191\n5.4　对象包装器与自动装箱 192\n5.5　参数数量可变的方法 195\n5.6　枚举类 196\n5.7　反射 198\n5.7.1　Class类 199\n5.7.2　声明异常入门 201\n5.7.3　资源 202\n5.7.4　利用反射分析类的能力 203\n5.7.5　使用反射在运行时分析\n对象 208\n5.7.6　使用反射编写泛型数组\n代码 213\n5.7.7　调用任意方法和构造器 216\n5.8　继承的设计技巧 219")])])}),[],!1,null,null,null);t.default=e.exports}}]);