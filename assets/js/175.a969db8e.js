(window.webpackJsonp=window.webpackJsonp||[]).push([[175],{547:function(t,s,n){"use strict";n.r(s);var e=n(4),a=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"spring-基础小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-基础小结"}},[t._v("#")]),t._v(" Spring 基础小结")]),t._v(" "),s("h2",{attrs:{id:"spring-基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-基础"}},[t._v("#")]),t._v(" Spring 基础")]),t._v(" "),s("h3",{attrs:{id:"什么是-spring-框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-框架"}},[t._v("#")]),t._v(" 什么是 Spring 框架？")]),t._v(" "),s("p",[t._v("Spring 是一款开源的轻量级 Java 开发框架，旨在提高开发人员的开发效率以及系统的可维护性。开箱即用。")]),t._v(" "),s("p",[t._v("一般说 Spring 框架指的都是 "),s("code",[t._v("Spring Framework")])]),t._v(" "),s("p",[t._v("核心功能主要是 IoC 和 AOP。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Spring 官网："),s("a",{attrs:{href:"https://spring.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://spring.io/"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[t._v("中文文档："),s("a",{attrs:{href:"https://springdoc.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://springdoc.cn/"),s("OutboundLink")],1)])])]),t._v(" "),s("h3",{attrs:{id:"spring-包含哪些模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-包含哪些模块"}},[t._v("#")]),t._v(" Spring 包含哪些模块？")]),t._v(" "),s("p",[t._v("Spring4.x 版本：")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"image","data-src":"https://cmty256.github.io/imgs-blog/Java/image.2jlh711fn5y0.webp",loading:"lazy"}})]),t._v(" "),s("p",[t._v("Spring5.x 版本：")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"image","data-src":"https://cmty256.github.io/imgs-blog/Java/image.5g3vvvp45yw0.webp",loading:"lazy"}})]),t._v(" "),s("blockquote",[s("p",[t._v("4.x -> 5.x")]),t._v(" "),s("p",[t._v("主要变化：")]),t._v(" "),s("ul",[s("li",[t._v("Web 模块的 Portlet 组件被废弃了，")]),t._v(" "),s("li",[t._v("同时增加了用于"),s("strong",[t._v("异步响应式处理")]),t._v("的 WebFlux 组件")])])]),t._v(" "),s("h4",{attrs:{id:"core-container"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#core-container"}},[t._v("#")]),t._v(" Core Container")]),t._v(" "),s("p",[t._v("Spring 框架的核心模块，也可以说是基础模块，主要提供 IoC 依赖注入功能的支持。")]),t._v(" "),s("p",[t._v("Spring 其他所有的功能基本都需要依赖于该模块。")]),t._v(" "),s("p",[t._v("主要包含：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("spring-core")]),t._v("：Spring 框架基本的"),s("strong",[t._v("核心工具类")]),t._v("。")]),t._v(" "),s("li",[s("strong",[t._v("spring-beans")]),t._v("：提供对 bean 的创建、配置和管理等功能的支持。")]),t._v(" "),s("li",[s("strong",[t._v("spring-context")]),t._v("：提供对国际化、事件传播、资源加载等功能的支持。")]),t._v(" "),s("li",[s("strong",[t._v("spring-expression")]),t._v("：提供对表达式语言（Spring Expression Language）SpEL 的支持，只依赖于 core 模块，不依赖于其他模块，可以单独使用。")])]),t._v(" "),s("h4",{attrs:{id:"aop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aop"}},[t._v("#")]),t._v(" AOP")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("spring-aspects")]),t._v("：该模块为与 AspectJ 的集成提供支持。")]),t._v(" "),s("li",[s("strong",[t._v("spring-aop")]),t._v("：提供了"),s("strong",[t._v("面向切面的编程实现")]),t._v("。")]),t._v(" "),s("li",[s("strong",[t._v("spring-instrument")]),t._v("：提供了为 JVM 添加代理（agent）的功能。 具体来讲，它为 Tomcat 提供了一个织入代理，能够为 Tomcat 传递【类文件】，就像这些文件是被类加载器加载的一样。")])]),t._v(" "),s("h4",{attrs:{id:"data-access-integration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#data-access-integration"}},[t._v("#")]),t._v(" Data Access/Integration")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("spring-jdbc")]),t._v("：提供了对"),s("strong",[t._v("数据库")]),t._v("访问的抽象 JDBC。不同的数据库都有自己独立的 API 用于操作数据库，而 Java 程序只需要和 JDBC API 交互，这样就屏蔽了数据库的影响。")]),t._v(" "),s("li",[s("strong",[t._v("spring-tx")]),t._v("：提供对事务的支持。")]),t._v(" "),s("li",[s("strong",[t._v("spring-orm")]),t._v("：提供对 Hibernate、JPA、iBatis 等 ORM 框架的支持。")]),t._v(" "),s("li",[s("strong",[t._v("spring-oxm")]),t._v("：提供一个抽象层支撑 OXM(Object-to-XML-Mapping)，例如：JAXB、Castor、XMLBeans、JiBX 和 XStream 等。")]),t._v(" "),s("li",[s("strong",[t._v("spring-jms")]),t._v(" : 消息服务。自 Spring Framework 4.1 以后，它还提供了对 spring-messaging 模块的继承。")])]),t._v(" "),s("h4",{attrs:{id:"spring-web"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-web"}},[t._v("#")]),t._v(" Spring Web")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("spring-web")]),t._v("：对 Web 功能的实现提供一些最基础的支持。")]),t._v(" "),s("li",[s("strong",[t._v("spring-webmvc")]),t._v("：提供对 Spring MVC 的实现。")]),t._v(" "),s("li",[s("strong",[t._v("spring-websocket")]),t._v("：提供了对 WebSocket 的支持，"),s("strong",[t._v("WebSocket 可以让客户端和服务端进行双向通信")]),t._v("。")]),t._v(" "),s("li",[s("strong",[t._v("spring-webflux")]),t._v("：提供对 WebFlux 的支持。WebFlux 是 Spring Framework 5.0 中引入的新的响应式框架。与 Spring MVC 不同，它不需要 Servlet API，是完全异步。")])]),t._v(" "),s("h4",{attrs:{id:"messaging"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#messaging"}},[t._v("#")]),t._v(" Messaging")]),t._v(" "),s("p",[s("strong",[t._v("spring-messaging")]),t._v(" 是从 Spring4.0 开始新加入的一个模块，主要职责是为 Spring 框架集成一些基础的报文传送应用。")]),t._v(" "),s("h4",{attrs:{id:"spring-test"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-test"}},[t._v("#")]),t._v(" Spring Test")]),t._v(" "),s("p",[t._v("提供了对测试的支持，包括了 JUnit 和 TestNG 等测试框架的集成，以及 Spring 应用程序的集成测试等。")]),t._v(" "),s("h4",{attrs:{id:"核心模块总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#核心模块总结"}},[t._v("#")]),t._v(" 核心模块总结")]),t._v(" "),s("ol",[s("li",[t._v("Spring Core 模块：提供了 Spring 框架的核心功能，"),s("strong",[t._v("包括 IoC（控制反转）和 AOP（面向切面编程）等，是整个 Spring 框架的基础")]),t._v("。")]),t._v(" "),s("li",[t._v("Spring Context 模块：建立在 Spring Core 模块之上，提供了一个框架式的上下文环境，"),s("strong",[t._v("用于管理 Bean 的生命周期和配置元数据等")]),t._v("。")]),t._v(" "),s("li",[t._v("Spring JDBC 模块："),s("strong",[t._v("提供了对 JDBC 的封装")]),t._v("，简化了数据库访问的操作，包括了连接管理、事务管理、异常处理等。")]),t._v(" "),s("li",[t._v("Spring ORM 模块：提供了对 ORM（对象关系映射）框架的支持，包括了 Hibernate、MyBatis 等，使得 Java 应用程序可以方便地访问数据库。")]),t._v(" "),s("li",[t._v("Spring Web 模块："),s("strong",[t._v("提供了对 Web 开发的支持")]),t._v("，包括了 Web 应用程序的 MVC 框架、RESTful Web 服务、WebSocket 等。")]),t._v(" "),s("li",[t._v("Spring Test 模块："),s("strong",[t._v("提供了对测试的支持")]),t._v("，包括了 JUnit 和 TestNG 等测试框架的集成，以及 Spring 应用程序的集成测试等。")]),t._v(" "),s("li",[t._v("Spring Security 模块："),s("strong",[t._v("提供了对安全性的支持")]),t._v("，包括了认证、授权、加密等，使得 Java 应用程序可以更好地保护用户数据和隐私。")])]),t._v(" "),s("h3",{attrs:{id:"spring-spring-mvc-spring-boot-之间是什么关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-spring-mvc-spring-boot-之间是什么关系"}},[t._v("#")]),t._v(" Spring,Spring MVC,Spring Boot 之间是什么关系?")]),t._v(" "),s("p",[t._v("Spring、Spring MVC 和 Spring Boot 是 Spring 框架的三个核心模块。")]),t._v(" "),s("p",[t._v("它们有以下的关系：")]),t._v(" "),s("ol",[s("li",[s("p",[s("code",[t._v("Spring")]),t._v(" 是 "),s("strong",[t._v("Spring 框架的核心模块")]),t._v("，主要提供了 IoC 容器、AOP、事务管理等功能，它"),s("strong",[t._v("是其他两个模块的基础")]),t._v("。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("Spring MVC")]),t._v(" 是"),s("strong",[t._v("在 Spring 基础上开发的 Web 框架")]),t._v("，提供了 MVC 架构的支持，可以用来开发 Web 应用程序。Spring MVC 可以通过 Spring IoC 容器来管理控制器、视图和其他组件。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("Spring Boot")]),t._v(" 是基于 Spring 框架的"),s("strong",[t._v("快速开发框架")]),t._v("，提供了自动化配置、快速启动、自带服务器等功能，可以快速地开发独立的、生产级别的 Spring 应用程序。")]),t._v(" "),s("p",[s("code",[t._v("Spring Boot")]),t._v(" 不仅整合了 Spring 和 Spring MVC 所有的功能，还提供了许多便利的功能，如对嵌入式服务器的支持、对各种数据源的自动配置等。")])])]),t._v(" "),s("p",[t._v("因此，可以看出")]),t._v(" "),s("ul",[s("li",[t._v("Spring MVC 和 Spring Boot 都是建立在 Spring 框架之上的，")]),t._v(" "),s("li",[t._v("Spring MVC 是 Spring 框架在 Web 开发方面的扩展，")]),t._v(" "),s("li",[t._v("而 Spring Boot 则是在 Spring MVC 的基础上，通过自动化配置和快速启动等功能，进一步简化了 Spring 应用程序的开发。")])]),t._v(" "),s("h2",{attrs:{id:"spring-mvc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc"}},[t._v("#")]),t._v(" Spring MVC")]),t._v(" "),s("h3",{attrs:{id:"说说自己对于-spring-mvc-了解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说说自己对于-spring-mvc-了解"}},[t._v("#")]),t._v(" 说说自己对于 Spring MVC 了解?")]),t._v(" "),s("blockquote",[s("p",[t._v("MVC 是"),s("strong",[t._v("模型(Model)")]),t._v("、"),s("strong",[t._v("视图(View)")]),t._v("、"),s("strong",[t._v("控制器(Controller)"),s("strong",[t._v("的简写，其")]),t._v("核心思想")]),t._v("是通过将业务逻辑、数据、显示分离来组织代码。")])]),t._v(" "),s("p",[t._v("Spring MVC 是 Spring 框架中的一个模块，用于构建基于 Servlet 的 Web 应用程序，它是一种基于 MVC（Model-View-Controller）设计模式的 Web 框架。")]),t._v(" "),s("ol",[s("li",[t._v("模型层（Model）负责业务逻辑")]),t._v(" "),s("li",[t._v("视图层（View）负责呈现数据")]),t._v(" "),s("li",[t._v("控制器层（Controller）负责接收请求并处理请求，将 Model 和 View 集成在一起。")])]),t._v(" "),s("p",[t._v("更早的时期，是使用 "),s("code",[t._v("Servlet")]),t._v(" 和 "),s("code",[t._v("JSP")]),t._v(" 的时代。")]),t._v(" "),s("h3",{attrs:{id:"spring-mvc-的核心组件有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc-的核心组件有哪些"}},[t._v("#")]),t._v(" Spring MVC 的核心组件有哪些？")]),t._v(" "),s("ul",[s("li",[s("strong",[s("code",[t._v("DispatcherServlet")])]),t._v("："),s("strong",[t._v("核心的中央处理器")]),t._v("，负责接收请求、分发，并给予客户端响应。")]),t._v(" "),s("li",[s("strong",[s("code",[t._v("HandlerMapping")])]),t._v("："),s("strong",[t._v("处理器映射器")]),t._v("，根据 uri 去匹配查找能处理的 "),s("code",[t._v("Handler")]),t._v(" ，并会将请求涉及到的拦截器和 "),s("code",[t._v("Handler")]),t._v(" 一起封装。")]),t._v(" "),s("li",[s("strong",[s("code",[t._v("HandlerAdapter")])]),t._v("："),s("strong",[t._v("处理器适配器")]),t._v("，根据 "),s("code",[t._v("HandlerMapping")]),t._v(" 找到的 "),s("code",[t._v("Handler")]),t._v(" ，适配执行对应的 "),s("code",[t._v("Handler")]),t._v("。")]),t._v(" "),s("li",[s("strong",[s("code",[t._v("Handler")])]),t._v("："),s("strong",[t._v("请求处理器")]),t._v("，处理实际请求的处理器。（Controller）")]),t._v(" "),s("li",[s("strong",[s("code",[t._v("ViewResolver")])]),t._v("："),s("strong",[t._v("视图解析器")]),t._v("，根据 "),s("code",[t._v("Handler")]),t._v(" 返回的逻辑视图 / 视图，解析并渲染真正的视图，并传递给 "),s("code",[t._v("DispatcherServlet")]),t._v(" 响应客户端。")])]),t._v(" "),s("h3",{attrs:{id:"拦截器和过滤器了解么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拦截器和过滤器了解么"}},[t._v("#")]),t._v(" 拦截器和过滤器了解么？")]),t._v(" "),s("p",[t._v("拦截器和过滤器都是 Java Web 开发中常用的组件，"),s("strong",[t._v("用于对请求进行拦截和处理")]),t._v("，但它们有一些区别。")]),t._v(" "),s("blockquote",[s("p",[s("em",[s("strong",[t._v("1、拦截器")])])])]),t._v(" "),s("p",[t._v("拦截器（Interceptor）是 Spring "),s("strong",[t._v("MVC 框架中的一种组件")]),t._v("，它可以对请求进行拦截、处理和转发，通常用于实现用户认证、日志记录、性能监控等功能。")]),t._v(" "),s("p",[t._v("拦截器的"),s("strong",[t._v("执行顺序是由配置顺序决定的")]),t._v("，可以通过实现 "),s("code",[t._v("HandlerInterceptor")]),t._v(" 接口来自定义拦截器。")]),t._v(" "),s("p",[t._v("Spring MVC 框架支持多个拦截器，"),s("strong",[t._v("可以通过配置文件或注解来添加拦截器")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyInterceptor")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HandlerInterceptor")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("preHandle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletRequest")]),t._v(" request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletResponse")]),t._v(" response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在请求处理之前进行拦截，可以进行权限验证、日志记录等操作")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回true表示继续执行后续的请求处理")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postHandle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletRequest")]),t._v(" request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletResponse")]),t._v(" response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ModelAndView")]),t._v(" modelAndView"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在请求处理之后但还未渲染视图时进行拦截，可以对数据进行处理或者添加公共数据到视图中")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("afterCompletion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletRequest")]),t._v(" request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletResponse")]),t._v(" response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" ex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在请求处理完成并视图渲染之后进行拦截，可以进行一些资源清理的工作")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("p",[t._v("从上面的代码可以看出，拦截器包含三个方法："),s("code",[t._v("preHandle")]),t._v(" 请求的前置拦截、"),s("code",[t._v("postHandle")]),t._v(" 请求处理后的拦截、"),s("code",[t._v("afterCompletion")]),t._v(" 请求完成后的拦截。")]),t._v(" "),s("blockquote",[s("p",[s("em",[s("strong",[t._v("2、过滤器")])])])]),t._v(" "),s("p",[t._v("过滤器（Filter）是 "),s("strong",[t._v("Servlet 规范中的一种组件")]),t._v("，它可以对请求进行过滤和处理，通常用于实现字符编码转换、请求参数解析、安全控制等功能。")]),t._v(" "),s("p",[t._v("过滤器的"),s("strong",[t._v("执行顺序是由配置顺序决定的")]),t._v("，可以通过实现 "),s("code",[t._v("Filter")]),t._v(" 接口来自定义过滤器。")]),t._v(" "),s("p",[t._v("Servlet 规范支持多个过滤器，可以通过配置文件或注解来添加过滤器。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyFilter")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Filter")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FilterConfig")]),t._v(" filterConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 过滤器初始化，在应用启动时执行")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doFilter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletRequest")]),t._v(" request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletResponse")]),t._v(" response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FilterChain")]),t._v(" chain"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 过滤器主体逻辑，可以在此处进行请求、响应的处理和拦截")]),t._v("\n        chain"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doFilter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用FilterChain的doFilter方法将请求传递给下一个过滤器或Servlet")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("destroy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 过滤器销毁，在应用关闭时执行")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("p",[t._v("从上面代码可以看出，过滤器也包含三个方法："),s("code",[t._v("init")]),t._v(" 过滤器初始化、"),s("code",[t._v("doFilter")]),t._v(" 过滤器主体逻辑、"),s("code",[t._v("destroy")]),t._v(" 过滤器销毁。")]),t._v(" "),s("blockquote",[s("p",[s("em",[s("strong",[t._v("3、拦截器和过滤器的区别")])])])]),t._v(" "),s("p",[t._v("拦截器和过滤器的区别在于它们的"),s("strong",[t._v("作用范围")]),t._v("和"),s("strong",[t._v("使用场景")]),t._v("不同。")]),t._v(" "),s("p",[t._v("拦截器的作用范围是在 Controller 层，用于拦截和处理请求，通常用于"),s("strong",[t._v("实现业务逻辑的控制和处理")]),t._v("；")]),t._v(" "),s("p",[t._v("而过滤器的作用范围是在 Servlet 层，用于过滤和处理请求，通常用于"),s("strong",[t._v("实现请求的预处理和后处理")]),t._v("。")]),t._v(" "),s("p",[t._v("拦截器和过滤器的使用场景也不同，一般来说，应该"),s("strong",[t._v("优先选择使用拦截器")]),t._v("来实现业务逻辑控制和处理，只有在特定的情况下才需要使用过滤器来实现请求的预处理和后处理。")]),t._v(" "),s("h3",{attrs:{id:"spring-mvc-的请求处理流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc-的请求处理流程"}},[t._v("#")]),t._v(" Spring MVC 的请求处理流程")]),t._v(" "),s("p",[t._v("大致分为 7 个步骤：")]),t._v(" "),s("ol",[s("li",[t._v("首先，客户端发送请求到 DispatcherServlet "),s("code",[t._v("核心中央处理器")]),t._v("，")]),t._v(" "),s("li",[t._v("然后 DispatcherServlet 接收请求并将请求交给 HandlerMapping "),s("code",[t._v("处理器映射器")]),t._v(" 进行处理，")]),t._v(" "),s("li",[t._v("HandlerMapping 根据请求的 URL 找到对应的 Controller "),s("code",[t._v("请求处理器")]),t._v("，")]),t._v(" "),s("li",[t._v("Controller 处理请求并返回一个 "),s("code",[t._v("ModelAndView")]),t._v(" 对象，ModelAndView 包含数据模型和视图名称，")]),t._v(" "),s("li",[t._v("DispatcherServlet 将 ModelAndView 对象交给 ViewResolver "),s("code",[t._v("视图解析器")]),t._v(" 进行处理，")]),t._v(" "),s("li",[t._v("ViewResolver 将逻辑视图名称解析成真正的视图实现，")]),t._v(" "),s("li",[t._v("最后 DispatcherServlet 将请求转发到对应的视图实现，由视图实现将模型数据呈现给客户端。")])]),t._v(" "),s("h2",{attrs:{id:"spring-框架中用到了哪些设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-框架中用到了哪些设计模式"}},[t._v("#")]),t._v(" Spring 框架中用到了哪些设计模式？")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("工厂设计模式")]),t._v(" : Spring 使用工厂模式通过 "),s("code",[t._v("BeanFactory")]),t._v("、"),s("code",[t._v("ApplicationContext")]),t._v(" 创建 bean 对象。")]),t._v(" "),s("li",[s("strong",[t._v("代理设计模式")]),t._v(" : Spring AOP 功能的实现。")]),t._v(" "),s("li",[s("strong",[t._v("单例设计模式")]),t._v(" : Spring 中的 Bean 默认都是单例的。")]),t._v(" "),s("li",[s("strong",[t._v("模板方法模式")]),t._v(" : Spring 中 "),s("code",[t._v("jdbcTemplate")]),t._v("、"),s("code",[t._v("hibernateTemplate")]),t._v(" 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式。")]),t._v(" "),s("li",[s("strong",[t._v("包装器设计模式")]),t._v(" : 我们的项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源。")]),t._v(" "),s("li",[s("strong",[t._v("观察者模式:")]),t._v(" Spring 事件驱动模型就是观察者模式很经典的一个应用。")]),t._v(" "),s("li",[s("strong",[t._v("适配器模式")]),t._v(" : Spring AOP 的增强或通知(Advice)使用到了适配器模式、spring MVC 中也是用到了适配器模式适配 "),s("code",[t._v("Controller")]),t._v("。")])]),t._v(" "),s("h2",{attrs:{id:"spring-事务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-事务"}},[t._v("#")]),t._v(" Spring 事务")]),t._v(" "),s("h3",{attrs:{id:"transactional-rollbackfor-exception-class-注解了解吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#transactional-rollbackfor-exception-class-注解了解吗"}},[t._v("#")]),t._v(" @Transactional(rollbackFor = Exception.class)注解了解吗？")]),t._v(" "),s("ul",[s("li",[t._v("在 "),s("code",[t._v("@Transactional")]),t._v(" 注解中如果不配置 "),s("code",[t._v("rollbackFor")]),t._v(" 属性，那么事务只会在遇到 "),s("code",[t._v("RuntimeException")]),t._v(" 的时候才会回滚，")]),t._v(" "),s("li",[t._v("加上 "),s("code",[t._v("rollbackFor=Exception.class")]),t._v(", 可以让事务在遇到非运行时异常时也会回滚。")])]),t._v(" "),s("h2",{attrs:{id:"常见反序列化注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见反序列化注解"}},[t._v("#")]),t._v(" 常见反序列化注解")]),t._v(" "),s("blockquote",[s("p",[t._v("反序列化请求体")])]),t._v(" "),s("p",[s("code",[t._v("@RequestBody")]),t._v(" 注解：")]),t._v(" "),s("ul",[s("li",[t._v("用途：将"),s("strong",[t._v("请求体中")]),t._v("的数据反序列化为 Java 对象。")]),t._v(" "),s("li",[t._v("用法：通常用于处理发送 JSON 或 XML 数据的 POST 和 PUT 请求。")]),t._v(" "),s("li",[t._v("示例："),s("code",[t._v("@RequestBody Person person")])])]),t._v(" "),s("blockquote",[s("p",[t._v("反序列化参数")])]),t._v(" "),s("ol",[s("li",[s("code",[t._v("@RequestParam")]),t._v(" 注解：\n"),s("ul",[s("li",[t._v("用途：从 URL "),s("strong",[t._v("查询参数中")]),t._v("获取值。")]),t._v(" "),s("li",[t._v("示例："),s("code",[t._v("@RequestParam String name, @RequestParam int age")])]),t._v(" "),s("li",[t._v("url：http://localhost:7529/getName?name=zhangsan")])])]),t._v(" "),s("li",[s("code",[t._v("@PathVariable")]),t._v(" 注解：\n"),s("ul",[s("li",[t._v("用途：从 URL "),s("strong",[t._v("路径中")]),t._v("获取值。(通常用于 Restful 风格接口的实现)")]),t._v(" "),s("li",[t._v("示例："),s("code",[t._v("@PathVariable Long id")])]),t._v(" "),s("li",[t._v("url：http://localhost:7529/device/44050000081197526009")])])]),t._v(" "),s("li",[s("code",[t._v("@RequestHeader")]),t._v(" 注解：\n"),s("ul",[s("li",[t._v("用途：从"),s("strong",[t._v("请求头中")]),t._v("获取值，例如获取 "),s("code",[t._v("Content-Type")]),t._v(" 或自定义的请求头信息。")]),t._v(" "),s("li",[t._v("示例："),s("code",[t._v('@RequestHeader("User-Agent") String userAgent')])])])]),t._v(" "),s("li",[t._v("自定义注解：\n"),s("ul",[s("li",[t._v("用途：创建自定义注解来反序列化特定类型的参数。")]),t._v(" "),s("li",[t._v("示例："),s("code",[t._v("@DateParam Date birthDate")])])])])]),t._v(" "),s("h2",{attrs:{id:"bean-的生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean-的生命周期"}},[t._v("#")]),t._v(" Bean 的生命周期")]),t._v(" "),s("p",[t._v("包括以下几个阶段：")]),t._v(" "),s("ol",[s("li",[t._v("实例化：容器根据 Bean 定义创建 Bean 的实例。")]),t._v(" "),s("li",[t._v("属性填充：容器为 Bean 的属性设置值，包括通过构造函数注入和 setter 方法注入。")]),t._v(" "),s("li",[t._v("初始化：在 Bean 实例创建完成并设置好属性后，容器会调用 Bean 的初始化方法。可以通过配置初始化方法，或实现 InitializingBean 接口来自定义初始化逻辑。")]),t._v(" "),s("li",[t._v("使用：Bean 可以被应用程序使用，执行业务逻辑。")]),t._v(" "),s("li",[t._v("销毁：当 Bean 不再需要时，容器会调用 Bean 的销毁方法。可以通过配置销毁方法，或实现 DisposableBean 接口来自定义销毁逻辑。")])]),t._v(" "),s("h2",{attrs:{id:"configuration-和-component-有何区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configuration-和-component-有何区别"}},[t._v("#")]),t._v(" @Configuration 和 @Component 有何区别？")]),t._v(" "),s("p",[s("code",[t._v("@Configuration")]),t._v(" 和 "),s("code",[t._v("@Component")]),t._v(" 都是 Spring 框架中的注解，它们在将类作为 Spring 的 bean 的工作中发挥着类似的作用。然而，两者具有一些主要的区别：")]),t._v(" "),s("ol",[s("li",[t._v("用途\n"),s("ul",[s("li",[s("code",[t._v("@Component")]),t._v(" 通常用于下列类上，这些类在应用程序中执行各种类型的业务逻辑。")]),t._v(" "),s("li",[s("code",[t._v("@Configuration")]),t._v(" 通常应用于配置类，这些类定义了 Spring 容器应如何初始化和配置应用程序上下文。")])])]),t._v(" "),s("li",[s("code",[t._v("@Bean")]),t._v(" 注解\n"),s("ul",[s("li",[s("code",[t._v("@Configuration")]),t._v(" 类通常会有定义 "),s("code",[t._v("@Bean")]),t._v(" 的方法，这些方法将实例化，配置并返回需要在应用程序中其他位置注入的对象，这些对象将被 Spring 容器管理。")]),t._v(" "),s("li",[s("code",[t._v("@Component")]),t._v(" 通常不会有 "),s("code",[t._v("@Bean")]),t._v(" 注解。")])])]),t._v(" "),s("li",[t._v("CGLIB 代理\n"),s("ul",[s("li",[s("code",[t._v("@Configuration")]),t._v(" 在运行时会被 Spring 通过 CGLIB 进行子类代理，这是为了方便 "),s("code",[t._v("@Configuration")]),t._v(" 类中定义的 "),s("code",[t._v("bean")]),t._v(" 可以被 Spring 容器识别并管理。默认情况下，Spring 容器会考虑到同一个 "),s("code",[t._v("@Configuration")]),t._v(" 类中的交互，确保正确的单例语义。")]),t._v(" "),s("li",[t._v("然而，"),s("code",[t._v("@Component")]),t._v(" 不会被 CGLIB 代理。")])])])]),t._v(" "),s("h3",{attrs:{id:"什么是-cglib"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-cglib"}},[t._v("#")]),t._v(" 什么是 CGLIB")]),t._v(" "),s("p",[t._v("CGLIB（Code Generation Library）是一个 Java 库，提供了动态生成 Java 字节码的功能。CGLIB 是一个强大的"),s("strong",[t._v("高级类加载器")]),t._v("，它使用 ASM（字节码操作工具库）极大提高了性能。")]),t._v(" "),s("p",[t._v("在 Spring 框架中，CGLIB 主要用于"),s("code",[t._v("代理类（Proxy）")]),t._v("的生成。当 Spring 需要生成一个动态代理类的时候，如果目标类没有实现接口，JDK 动态代理就不能使用了，作为替代，Spring 会用 CGLIB 动态生成一个继承目标类型的子类。这个子类可以覆写父类的所有非 final 方法，并在覆写的方法中添加一些前置或后置等操作。")]),t._v(" "),s("p",[t._v("例如，由 "),s("code",[t._v("@Configuration")]),t._v(" 注释的类在运行时会被 Spring 通过 CGLIB 进行子类化，这样才能知道由 "),s("code",[t._v("@Bean")]),t._v(" 注释的方法何时被调用，并实现【正确的单例 / 原型】等 bean 作用域语义，同时支持 "),s("code",[t._v("@Autowired")]),t._v(" 等注入。")]),t._v(" "),s("p",[t._v("结果是 "),s("strong",[t._v("Spring 使用 CGLIB 在运行时生成一个新的类，它是被代理类的子类")]),t._v("，并且包含了增强的代码。这就是 Spring AOP 和事务管理等面向切面编程功能的工作原理。")]),t._v(" "),s("h2",{attrs:{id:"深度考察"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深度考察"}},[t._v("#")]),t._v(" 深度考察")]),t._v(" "),s("h3",{attrs:{id:"说说你用过和了解过的-spring-的扩展点-项目中哪里用到了"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说说你用过和了解过的-spring-的扩展点-项目中哪里用到了"}},[t._v("#")]),t._v(" 说说你用过和了解过的 spring 的扩展点，项目中哪里用到了")]),t._v(" "),s("p",[t._v("Spring Framework 提供了许多扩展点，其中一些常见的扩展点包括：")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("BeanPostProcessor")]),t._v("：允许你在 Spring 容器实例化 bean 之后和初始化 bean 之前自定义 bean 的行为。通常用于 AOP 代理、属性注入等。⭐️")]),t._v(" "),s("li",[s("strong",[t._v("BeanFactoryPostProcessor")]),t._v("：允许你在所有 bean 定义加载到容器之后，但在 bean 实例化之前修改 bean 工厂的内容。通常用于修改属性值或添加属性占位符。⭐️")]),t._v(" "),s("li",[s("strong",[t._v("ApplicationContextInitializer")]),t._v("：用于在应用程序上下文初始化之前执行自定义初始化逻辑。可以用来动态地修改或初始化 Spring 应用程序上下文。⭐️")]),t._v(" "),s("li",[s("strong",[t._v("ApplicationListener")]),t._v("：用于监听 Spring 应用程序中的事件，例如上下文刷新事件、应用程序启动事件等。可以自定义处理事件的逻辑。⭐️")]),t._v(" "),s("li",[s("strong",[t._v("HandlerInterceptor")]),t._v("：用于在 Spring MVC 应用程序中对请求进行拦截和预处理。可以用于实现身份验证、日志记录等功能。⭐️")]),t._v(" "),s("li",[s("strong",[t._v("ViewResolver")]),t._v("：用于解析视图名称并将其映射到实际的视图对象。可以自定义视图解析逻辑，例如将视图名称映射到 JSP、Thymeleaf 等视图技术。")]),t._v(" "),s("li",[s("strong",[t._v("MessageSource")]),t._v("：用于国际化和本地化支持，允许你在应用程序中轻松切换不同的语言和区域设置。")]),t._v(" "),s("li",[s("strong",[t._v("HandlerMethodArgumentResolver")]),t._v("：用于自定义方法参数的解析方式，可以扩展 Spring MVC 的功能，例如解析自定义注解、自定义参数类型等。")]),t._v(" "),s("li",[s("strong",[t._v("AuthenticationProvider")]),t._v("：用于自定义身份验证逻辑，通常与 Spring Security 一起使用，用于实现自定义的身份验证策略。")])]),t._v(" "),s("p",[t._v("在项目中，具体使用哪些扩展点取决于项目的需求和架构。例如，")]),t._v(" "),s("ul",[s("li",[t._v("如果项目使用了 Spring MVC，那么可能会使用 HandlerInterceptor 来进行请求拦截和处理。")]),t._v(" "),s("li",[t._v("如果需要自定义 Bean 的初始化过程，可能会使用 BeanPostProcessor 或 BeanFactoryPostProcessor。(手写 bean 也会用到)")]),t._v(" "),s("li",[t._v("如果需要实现国际化支持，可能会配置 MessageSource。")])]),t._v(" "),s("h3",{attrs:{id:"spring-mvc-的拦截器-servlet-的过滤器-spring-gateway-的过滤器。他们几个区别是什么-都在哪些场景下用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc-的拦截器-servlet-的过滤器-spring-gateway-的过滤器。他们几个区别是什么-都在哪些场景下用"}},[t._v("#")]),t._v(" spring mvc 的拦截器，servlet 的过滤器，spring gateway 的过滤器。他们几个区别是什么，都在哪些场景下用？")]),t._v(" "),s("p",[t._v("Spring MVC 的拦截器、Servlet 的过滤器以及 Spring Cloud Gateway 的过滤器"),s("strong",[t._v("都用于对 HTTP 请求进行预处理、拦截和处理")]),t._v("，但它们在不同的层级和场景下使用，并具有不同的功能和特点：")]),t._v(" "),s("ol",[s("li",[s("em",[t._v("Spring MVC 的拦截器")]),t._v("：\n"),s("ul",[s("li",[t._v("层级：工作在 Spring MVC 框架内部，用于拦截 Spring MVC 中的 Controller 请求。")]),t._v(" "),s("li",[t._v("主要功能：对 Controller 层进行拦截，可以在请求到达 Controller 之前和之后执行自定义逻辑，如身份验证、日志记录、权限控制等。")]),t._v(" "),s("li",[t._v("场景：适用于单体应用程序，用于处理请求的前置和后置逻辑，以及与 Web 应用程序相关的业务逻辑。")])])]),t._v(" "),s("li",[s("em",[t._v("Servlet 的过滤器")]),t._v("：\n"),s("ul",[s("li",[t._v("层级：工作在 Servlet 容器级别，位于 Web 应用程序的请求处理管道中，可以拦截所有 Servlet 请求。")]),t._v(" "),s("li",[t._v("主要功能：对所有 HTTP 请求进行拦截和处理，包括静态资源请求、Servlet 请求等。常用于日志记录、字符编码转换、跨域处理等通用性任务。")]),t._v(" "),s("li",[t._v("场景：适用于任何基于 Servlet 的 Web 应用程序，用于执行通用的请求处理逻辑，无论是单体应用还是分布式应用。")])])]),t._v(" "),s("li",[s("em",[t._v("Spring Cloud Gateway 的过滤器")]),t._v("：\n"),s("ul",[s("li",[t._v("层级：工作在微服务网关层级，用于处理分布式系统中的请求路由、请求转发、身份验证、限流等任务。")]),t._v(" "),s("li",[t._v("主要功能：在微服务架构中，Gateway 充当请求的入口，通过配置一系列过滤器来执行请求处理逻辑。这些过滤器可以进行路由、权限校验、熔断、限流等功能。")]),t._v(" "),s("li",[t._v("场景：适用于微服务架构中，用于构建高度灵活、可伸缩的 API 网关。可以实现微服务之间的请求路由、请求合并、安全验证等功能。")])])])]),t._v(" "),s("p",[t._v("总的来说，这三种过滤/拦截机制各自有不同的作用范围和功能：")]),t._v(" "),s("ul",[s("li",[t._v("Spring MVC 的拦截器用于对 Controller 请求的拦截和处理。")]),t._v(" "),s("li",[t._v("Servlet 的过滤器用于对所有 Servlet 请求的拦截和处理。")]),t._v(" "),s("li",[t._v("Spring Cloud Gateway 的过滤器用于构建微服务架构下的 API 网关，实现请求路由和各种微服务相关的处理逻辑。")])]),t._v(" "),s("p",[s("em",[t._v("Controller 请求和 Servlet 请求之间的关系")])]),t._v(" "),s("p",[t._v("Servlet 请求是 Web 应用程序中的原始 HTTP 请求，而 Controller 请求是 Spring MVC 中的处理器方法，用于处理特定 URL 映射的请求。")]),t._v(" "),s("p",[t._v("Spring MVC 使用 Servlet 容器来接收和处理 HTTP 请求，然后将请求分发给适当的 Controller 请求进行处理。")]),t._v(" "),s("p",[s("strong",[t._v("Servlet 请求包含了 Controller 请求")]),t._v("。")]),t._v(" "),s("ul",[s("li",[t._v("Servlet 请求是 Web 应用程序接收的原始 HTTP 请求，它包含了客户端浏览器发送的全部信息，包括请求头、请求方法、请求参数等。")]),t._v(" "),s("li",[t._v("Controller 请求是在 Spring MVC 或类似的框架中定义的处理器方法，用于处理特定 URL 映射的请求。这些方法接收 Servlet 请求作为输入，可以从中提取数据、执行业务逻辑，并生成响应。")])]),t._v(" "),s("p",[t._v("因此，"),s("strong",[t._v("Controller 请求是在 Servlet 请求的基础上定义的")]),t._v("，用于更方便地处理和分发请求，实现了更高级别的请求处理逻辑。")])])}),[],!1,null,null,null);s.default=a.exports}}]);