(window.webpackJsonp=window.webpackJsonp||[]).push([[186],{561:function(v,_,e){"use strict";e.r(_);var t=e(4),a=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"mybatis-基础知识小结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-基础知识小结"}},[v._v("#")]),v._v(" Mybatis 基础知识小结")]),v._v(" "),_("h2",{attrs:{id:"说说什么是-mybatis-吧"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#说说什么是-mybatis-吧"}},[v._v("#")]),v._v(" 说说什么是 Mybatis 吧")]),v._v(" "),_("p",[v._v("MyBatis 是一种优秀的持久层框架，它是一个基于 Java 的 "),_("code",[v._v("半ORM（对象关系映射）")]),v._v("框架，"),_("strong",[v._v("可以使用简单的 XML 或注解配置来映射原始类型、Map 和 Java 对象（POJO）到数据库表中的记录")]),v._v("。")]),v._v(" "),_("p",[v._v("MyBatis 支持自定义 "),_("code",[v._v("SQL")]),v._v("、存储过程和高级映射，可以将复杂的 JDBC 代码封装起来，使开发者只需要关注 "),_("code",[v._v("SQL")]),v._v(" 语句的编写和映射关系的配置，从而大大简化了数据库访问的开发工作。")]),v._v(" "),_("p",[v._v("MyBatis 的主要优点包括：易于使用、灵活性强、可以自定义 "),_("code",[v._v("SQL")]),v._v("、支持多种数据库、性能优秀等。")]),v._v(" "),_("p",[v._v("缺点是：对于复杂的 "),_("code",[v._v("SQL")]),v._v(" 还是需要自己手动编写,这就对码农的 SQL 功底有着较高的要求了,而且它的 "),_("code",[v._v("SQL")]),v._v(" 语句"),_("strong",[v._v("非常依赖数据库")]),v._v(",这就使得可能这个数据库可以用的 "),_("code",[v._v("SQL")]),v._v(" 换一个数据库就不行了。")]),v._v(" "),_("h2",{attrs:{id:"你刚刚说了-orm-框架-能不能告诉我什么是-orm-为什么说-mybatis-是半自动的-orm-框架呢"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#你刚刚说了-orm-框架-能不能告诉我什么是-orm-为什么说-mybatis-是半自动的-orm-框架呢"}},[v._v("#")]),v._v(" 你刚刚说了 ORM 框架,能不能告诉我什么是 ORM?为什么说 Mybatis 是半自动的 ORM 框架呢?")]),v._v(" "),_("p",[_("code",[v._v("ORM")]),v._v(" 说白了就是"),_("strong",[v._v("建立数据库字段和 "),_("code",[v._v("Java对象(POJO)")]),v._v(" 的一种映射关系技术")]),v._v(",")]),v._v(" "),_("p",[v._v("而 "),_("code",[v._v("Mybatis")]),v._v(" 由于"),_("strong",[v._v("建立这种映射需要我们手动编写 "),_("code",[v._v("SQL")])]),v._v(", 所以说它是半自动的。")]),v._v(" "),_("h2",{attrs:{id:"我们已经有-jdbc-了-为什么需要-mybatis-呢"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#我们已经有-jdbc-了-为什么需要-mybatis-呢"}},[v._v("#")]),v._v(" 我们已经有 JDBC 了,为什么需要 Mybatis 呢?")]),v._v(" "),_("p",[v._v("因为 "),_("code",[v._v("JDBC")]),v._v(" 有下面几个缺点:")]),v._v(" "),_("ol",[_("li",[v._v("建立连接麻烦。")]),v._v(" "),_("li",[_("code",[v._v("SQL")]),v._v(" 写在代码里面不好维护。")]),v._v(" "),_("li",[v._v("传参也很麻烦。")]),v._v(" "),_("li",[v._v("处理结果也很麻烦。")])]),v._v(" "),_("p",[v._v("一句话就是，"),_("code",[v._v("JDBC")]),v._v(" 使用起来麻烦，不如 "),_("code",[v._v("Mybatis")]),v._v(" 方便。")]),v._v(" "),_("h2",{attrs:{id:"和-的区别是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#和-的区别是什么"}},[v._v("#")]),v._v(" #{} 和 ${} 的区别是什么？")]),v._v(" "),_("p",[v._v("在 MyBatis 中，"),_("code",[v._v("$")]),v._v(" 和 "),_("code",[v._v("#")]),v._v(" 是两种不同类型的占位符，用于在 SQL 语句中引用参数或表达式，但它们的行为有一些重要区别：")]),v._v(" "),_("ol",[_("li",[_("code",[v._v("$")]),v._v(" 占位符（String Substitution）：\n"),_("ul",[_("li",[_("code",[v._v("$")]),v._v(" 用于"),_("strong",[v._v("字符串替换")]),v._v("，直接将参数的值嵌入 SQL 语句中，不使用预编译机制。")]),v._v(" "),_("li",[_("code",[v._v("$")]),v._v(" 不提供参数安全性，可能会导致 SQL 注入风险。")]),v._v(" "),_("li",[v._v("通常在需要"),_("strong",[v._v("动态生成列名、表名")]),v._v("等情况下使用 "),_("code",[v._v("$")]),v._v("。")]),v._v(" "),_("li",[v._v("例如，"),_("code",[v._v("select * from ${tableName}")]),v._v(" 中 "),_("code",[v._v("${tableName}")]),v._v(" 会被替换成实际的表名。")])])]),v._v(" "),_("li",[_("code",[v._v("#")]),v._v(" 占位符（Parameterized）：\n"),_("ul",[_("li",[_("code",[v._v("#")]),v._v(" 用于"),_("strong",[v._v("预编译参数")]),v._v("，会将参数值传递给数据库的预编译语句，提供参数安全性。")]),v._v(" "),_("li",[_("code",[v._v("#")]),v._v(" 通常在"),_("strong",[v._v("查询条件、插入、更新或删除操作")]),v._v("时使用。")]),v._v(" "),_("li",[v._v("例如，"),_("code",[v._v("select * from table where column = #{value}")]),v._v(" 中 "),_("code",[v._v("#{value}")]),v._v(" 会被替换成参数值，并使用预编译机制传递给数据库。")])])])]),v._v(" "),_("h2",{attrs:{id:"hibernate-和-mybatis-的区别是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#hibernate-和-mybatis-的区别是什么"}},[v._v("#")]),v._v(" Hibernate 和 MyBatis 的区别是什么？")]),v._v(" "),_("p",[v._v("Hibernate 和 MyBatis 都是 Java 中常用的 ORM（Object-Relational Mapping）框架，用于将 Java 对象映射到数据库表中。")]),v._v(" "),_("p",[v._v("虽然它们都可以用于实现数据库访问，但是它们有一些区别：")]),v._v(" "),_("ol",[_("li",[v._v("映射方式不同：\n"),_("ul",[_("li",[v._v("Hibernate 是一种全自动 ORM 框架，它使用 Java 对象映射到数据库表，")]),v._v(" "),_("li",[v._v("而 MyBatis 则是一种半自动 ORM 框架，它使用 SQL 映射文件来指定如何将 Java 对象映射到数据库表。")])])]),v._v(" "),_("li",[v._v("性能不同：\n"),_("ul",[_("li",[_("strong",[v._v("MyBatis 的性能通常比 Hibernate 更好")]),v._v("，因为它可以更好地控制 SQL 语句的生成和执行，可以更好地优化 SQL 语句。")]),v._v(" "),_("li",[v._v("而 Hibernate 对 SQL 的生成和优化是自动的，可能会导致性能问题。")])])]),v._v(" "),_("li",[v._v("配置方式不同：\n"),_("ul",[_("li",[v._v("Hibernate 配置相对比较复杂，需要编写映射文件和配置文件，")]),v._v(" "),_("li",[v._v("而 "),_("strong",[v._v("MyBatis 配置相对简单")]),v._v("，只需要编写 SQL 映射文件和配置文件即可。")])])]),v._v(" "),_("li",[v._v("支持的数据库不同：\n"),_("ul",[_("li",[v._v("Hibernate 支持多种数据库，包括 MySQL、Oracle、SQL Server 等，")]),v._v(" "),_("li",[v._v("而 "),_("strong",[v._v("MyBatis 对数据库的支持相对较少")]),v._v("，主要支持 MySQL、Oracle、SQL Server、PostgreSQL 等常用数据库。")])])]),v._v(" "),_("li",[v._v("对象关系维护不同：\n"),_("ul",[_("li",[v._v("Hibernate 可以自动维护对象之间的关系，包括一对一、一对多、多对多等关系，")]),v._v(" "),_("li",[v._v("而 "),_("strong",[v._v("MyBatis 不支持自动维护对象之间的关系")]),v._v("，需要手动编写 SQL 语句来实现。")])])])]),v._v(" "),_("p",[v._v("综合来说：")]),v._v(" "),_("ol",[_("li",[v._v("如果需要快速开发，可以选择 Hibernate，")]),v._v(" "),_("li",[v._v("如果需要更好的性能和更灵活的 SQL 控制，可以选择 MyBatis。")])]),v._v(" "),_("h2",{attrs:{id:"xml-映射文件中-除了常见的-select、insert、update、delete-标签之外-还有哪些标签"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#xml-映射文件中-除了常见的-select、insert、update、delete-标签之外-还有哪些标签"}},[v._v("#")]),v._v(" xml 映射文件中，除了常见的 select、insert、update、delete 标签之外，还有哪些标签？")]),v._v(" "),_("p",[v._v("还有很多其他的标签，"),_("code",[v._v("<resultMap>")]),v._v("、"),_("code",[v._v("<parameterMap>")]),v._v("、"),_("code",[v._v("<sql>")]),v._v("、"),_("code",[v._v("<include>")]),v._v("、"),_("code",[v._v("<selectKey>")]),v._v("，")]),v._v(" "),_("p",[v._v("加上动态 sql 的 9 个标签，"),_("code",[v._v("trim|where|set|foreach|if|choose|when|otherwise|bind")]),v._v(" 等，")]),v._v(" "),_("ul",[_("li",[v._v("其中 "),_("code",[v._v("<sql>")]),v._v(" 为 sql 片段标签，通过 "),_("code",[v._v("<include>")]),v._v(" 标签引入 sql 片段，")]),v._v(" "),_("li",[_("code",[v._v("<selectKey>")]),v._v(" 是不支持【自增的主键生成策略】标签。")])]),v._v(" "),_("h2",{attrs:{id:"dao-接口的工作原理是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dao-接口的工作原理是什么"}},[v._v("#")]),v._v(" Dao 接口的工作原理是什么？")]),v._v(" "),_("p",[v._v("在最佳实践中，通常一个 "),_("code",[v._v("xml")]),v._v(" 映射文件，都会写一个 Dao 接口与之对应。（ "),_("code",[v._v("xml")]),v._v(" <--\x3e "),_("code",[v._v("Mapper")]),v._v("）")]),v._v(" "),_("p",[_("strong",[v._v("Dao 接口就是人们常说的 "),_("code",[v._v("Mapper")]),v._v(" 接口")]),v._v("。")]),v._v(" "),_("ul",[_("li",[v._v("接口的"),_("strong",[v._v("全限名，就是映射文件中的 "),_("code",[v._v("namespace")]),v._v(" 的值")]),v._v("，")]),v._v(" "),_("li",[v._v("接口的"),_("strong",[v._v("方法名，就是映射文件中 "),_("code",[v._v("MappedStatement")]),v._v(" 的 id 值")]),v._v("，")]),v._v(" "),_("li",[v._v("接口"),_("strong",[v._v("方法内的参数，就是传递给 sql 的参数")]),v._v("。")])]),v._v(" "),_("p",[_("code",[v._v("Mapper")]),v._v(" 接口是没有实现类的，当调用接口方法时，【接口全限名 + 方法名】拼接字符串作为 key 值，可唯一定位一个 "),_("code",[v._v("MappedStatement")]),v._v(" ，")]),v._v(" "),_("p",[v._v("举例："),_("code",[v._v("com.mybatis3.mappers.StudentDao.findStudentById")]),v._v("，可以唯一找到 namespace 为 "),_("code",[v._v("com.mybatis3.mappers.StudentDao")]),v._v(" 下面 "),_("code",[v._v("id = findStudentById")]),v._v(" 的 "),_("code",[v._v("MappedStatement")]),v._v(" 。")]),v._v(" "),_("p",[v._v("在 MyBatis 中，每一个 "),_("code",[v._v("<select>")]),v._v("、"),_("code",[v._v("<insert>")]),v._v("、"),_("code",[v._v("<update>")]),v._v("、"),_("code",[v._v("<delete>")]),v._v(" 标签，都会被解析为一个 "),_("code",[v._v("MappedStatement")]),v._v(" 对象。")]),v._v(" "),_("h2",{attrs:{id:"dao-接口里的方法-参数不同时-方法能重载吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dao-接口里的方法-参数不同时-方法能重载吗"}},[v._v("#")]),v._v(" Dao 接口里的方法，参数不同时，方法能重载吗？")]),v._v(" "),_("p",[v._v("Dao 接口里的方法可以重载，但是 Mybatis 的 xml 里面的 ID 不允许重复。")]),v._v(" "),_("p",[v._v("还需要满足两个条件：")]),v._v(" "),_("ol",[_("li",[v._v("仅有一个无参方法和一个有参方法。")]),v._v(" "),_("li",[v._v("多个有参方法时，参数数量必须一致。且使用相同的 "),_("code",[v._v("@Param")]),v._v(" 注解，或者使用 "),_("code",[v._v("param1")]),v._v(" 这种。")])]),v._v(" "),_("blockquote",[_("p",[v._v("注意："),_("strong",[v._v("Mybatis 的 Dao 接口可以有多个重载方法，但是多个接口对应的映射必须只有一个，否则启动会报错。")])])]),v._v(" "),_("h2",{attrs:{id:"为什么要用-mybatis-而不直接用-sql"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用-mybatis-而不直接用-sql"}},[v._v("#")]),v._v(" 为什么要用 Mybatis 而不直接用 sql")]),v._v(" "),_("p",[v._v("使用 MyBatis 而不直接使用 SQL 有以下几个优势：")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("SQL 与 Java 代码分离：")]),v._v(" MyBatis 将 SQL 语句与 Java 代码分离，将 SQL 配置在 XML 文件中或使用注解方式，使得代码更加清晰、易读和易维护。这样也使得 SQL 可以与 Java 代码进行解耦，方便数据库查询逻辑的修改和优化，而无需修改 Java 代码。")]),v._v(" "),_("li",[_("strong",[v._v("参数处理和防止 SQL 注入：")]),v._v(" MyBatis 提供了参数处理机制，可以将 Java 对象映射到 SQL 参数，有效防止 SQL 注入攻击。同时，MyBatis 也会自动处理参数转义，避免了手动拼接 SQL 语句造成的安全风险。")]),v._v(" "),_("li",[_("strong",[v._v("数据库连接管理：")]),v._v(" MyBatis 管理了数据库连接的生命周期，确保在需要时打开和关闭连接，有效地提高了数据库资源的利用率和系统性能。")]),v._v(" "),_("li",[_("strong",[v._v("数据库结果集映射：")]),v._v(" MyBatis 提供了灵活的结果集映射机制，可以将查询结果直接映射为 Java 对象，使得查询结果的处理更加方便和直观。")]),v._v(" "),_("li",[_("strong",[v._v("缓存管理：")]),v._v(" MyBatis 支持缓存机制，可以缓存查询结果，避免频繁访问数据库，从而提高系统性能。")]),v._v(" "),_("li",[_("strong",[v._v("数据库移植性：")]),v._v(" 使用 MyBatis 可以实现数据库移植性，即通过修改 MyBatis 的配置，可以方便地切换不同的数据库，而无需修改大量的 SQL 语句。")])]),v._v(" "),_("p",[v._v("综上所述，使用 MyBatis 可以"),_("strong",[v._v("简化数据库访问的过程")]),v._v("，提高代码的可维护性和安全性，并提供更多功能和便利性，使得数据库操作更加优雅和高效。")]),v._v(" "),_("h2",{attrs:{id:"mybatis-一二级缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-一二级缓存"}},[v._v("#")]),v._v(" Mybatis 一二级缓存")]),v._v(" "),_("p",[v._v("MyBatis 提供了一级缓存和二级缓存来"),_("strong",[v._v("提高数据库访问性能和减少重复查询的次数")]),v._v("。")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("一级缓存：")]),v._v(" "),_("ul",[_("li",[v._v("一级缓存是 MyBatis 默认开启的缓存机制，它是在 SqlSession 级别的缓存（本地缓存），也就是说在同一个 SqlSession 中，查询的结果会被缓存起来。")]),v._v(" "),_("li",[v._v("当执行同一个 SqlSession 的相同 SQL 查询时，如果一级缓存中已经存在查询结果，则直接从缓存中返回结果，而不需要再去数据库查询，这样可以减少数据库的访问次数，提高查询性能。")]),v._v(" "),_("li",[v._v("一级缓存是一个本地缓存，它的作用范围是相对狭窄的，只在当前的 SqlSession 内有效，当 SqlSession 关闭时，缓存也会被清空。")])])]),v._v(" "),_("li",[_("strong",[v._v("二级缓存：")]),v._v(" "),_("ul",[_("li",[v._v("二级缓存是在 Mapper 级别的缓存，也称为全局缓存。可以被多个 SqlSession 共享。")]),v._v(" "),_("li",[v._v("当执行查询时，如果查询结果在二级缓存中存在，则直接从缓存中返回结果，而不需要再去数据库查询。")]),v._v(" "),_("li",[v._v("二级缓存是一个全局缓存，它可以跨越多个 SqlSession，适用于多个 SqlSession 共享查询结果的场景。")]),v._v(" "),_("li",[v._v("使用二级缓存需要在 MyBatis 配置文件中进行配置，可以选择使用默认的缓存实现或自定义缓存实现。")])])])]),v._v(" "),_("p",[v._v("需要注意的是，虽然缓存可以提高性能，但也会带来一致性的问题。当数据库中的数据发生变化时（比如更新、插入、删除操作），缓存中的数据可能会变得过时，这就需要考虑如何合理地处理缓存的刷新策略，以保证数据的一致性。")]),v._v(" "),_("p",[v._v("因此，在使用 MyBatis 的缓存时，需要根据具体的业务场景和需求，灵活地选择是否开启缓存，以及采用合适的缓存策略，以达到最佳的性能和数据一致性。")]),v._v(" "),_("h2",{attrs:{id:"讲讲-sqlsession"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#讲讲-sqlsession"}},[v._v("#")]),v._v(" 讲讲 SqLSession")]),v._v(" "),_("p",[_("code",[v._v("SqlSession")]),v._v(" 是 MyBatis 中的一个"),_("strong",[v._v("核心接口")]),v._v("，它提供了对数据库的操作方法，允许应用程序与数据库进行交互。")]),v._v(" "),_("p",[_("code",[v._v("SqlSession")]),v._v(" 是在 MyBatis 的配置文件中通过 "),_("code",[v._v("SqlSessionFactory")]),v._v(" 创建的，每个线程通常会有一个独立的 "),_("code",[v._v("SqlSession")]),v._v(" 实例，用于执行数据库操作。")]),v._v(" "),_("p",[_("code",[v._v("SqlSession")]),v._v(" 接口中定义了许多方法，其中一些重要的方法包括：")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("selectOne(String statement, Object parameter):")]),v._v(" 执行查询操作，返回单个结果对象。")]),v._v(" "),_("li",[_("strong",[v._v("selectList(String statement, Object parameter):")]),v._v(" 执行查询操作，返回多个结果对象组成的 List。")]),v._v(" "),_("li",[_("strong",[v._v("insert(String statement, Object parameter):")]),v._v(" 执行插入操作，将参数对象插入到数据库中。")]),v._v(" "),_("li",[_("strong",[v._v("update(String statement, Object parameter):")]),v._v(" 执行更新操作，更新数据库中的记录。")]),v._v(" "),_("li",[_("strong",[v._v("delete(String statement, Object parameter):")]),v._v(" 执行删除操作，删除数据库中的记录。")]),v._v(" "),_("li",[_("strong",[v._v("commit():")]),v._v(" 提交事务。")]),v._v(" "),_("li",[_("strong",[v._v("rollback():")]),v._v(" 回滚事务。")]),v._v(" "),_("li",[_("strong",[v._v("close():")]),v._v(" 关闭 "),_("code",[v._v("SqlSession")]),v._v(" 实例。")])]),v._v(" "),_("p",[_("code",[v._v("SqlSession")]),v._v(" 提供了对数据库的各种操作，通过执行 SQL 语句实现了数据的增删改查功能。在执行 SQL 语句时，"),_("code",[v._v("SqlSession")]),v._v(" 会通过 "),_("code",[v._v("Mapper")]),v._v(" 接口（或 XML 映射文件）找到对应的 SQL 语句，并将传入的参数映射到 SQL 中执行。")]),v._v(" "),_("p",[v._v("通常情况下，一个 "),_("code",[v._v("SqlSession")]),v._v(" 实例对应一个数据库事务，事务的提交和回滚可以通过调用 "),_("code",[v._v("commit()")]),v._v(" 和 "),_("code",[v._v("rollback()")]),v._v(" 方法实现。一般情况下，我们会在一个业务逻辑方法中创建一个 "),_("code",[v._v("SqlSession")]),v._v(" 实例，在该方法中执行数据库操作，然后提交或回滚事务，并最终关闭 "),_("code",[v._v("SqlSession")]),v._v("。")]),v._v(" "),_("p",[v._v("注意：由于 "),_("code",[v._v("SqlSession")]),v._v(" 是"),_("strong",[v._v("非线程安全")]),v._v("的，因此应该避免将它作为类成员变量或共享变量使用，而是应该在需要的时候创建新的实例，并在使用完毕后及时关闭。")]),v._v(" "),_("h2",{attrs:{id:"那-mapper-呢"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#那-mapper-呢"}},[v._v("#")]),v._v(" 那 Mapper 呢？")]),v._v(" "),_("p",[_("code",[v._v("Mapper")]),v._v(" 是 MyBatis 中用于定义数据访问接口的一种"),_("strong",[v._v("机制")]),v._v("。")]),v._v(" "),_("p",[v._v("它通过 Java 接口的方式来描述数据库操作，包含了对数据库的增删改查等操作方法的定义，但不包含具体的 SQL 语句。具体的 SQL 语句是在对应的 XML 映射文件中实现的。")]),v._v(" "),_("h2",{attrs:{id:"学习参考"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#学习参考"}},[v._v("#")]),v._v(" 学习参考")]),v._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://javaguide.cn/system-design/framework/mybatis/mybatis-interview.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("MyBatis常见面试题总结 | JavaGuide(Java面试 + 学习指南)"),_("OutboundLink")],1)]),v._v(" "),_("li",[_("a",{attrs:{href:"https://blog.csdn.net/yhc813/article/details/117718754",target:"_blank",rel:"noopener noreferrer"}},[v._v("Mybatis知识点梳理（收藏）_mybatis知识梳理-CSDN博客"),_("OutboundLink")],1)]),v._v(" "),_("li",[_("a",{attrs:{href:"https://www.w3cschool.cn/mybatis/mybatis-yta93bpj.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("MyBatis 中#{}和${}区别_w3cschool"),_("OutboundLink")],1)]),v._v(" "),_("li",[_("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/613184458",target:"_blank",rel:"noopener noreferrer"}},[v._v("Mybatis最全笔记知识点 - 知乎 (zhihu.com)"),_("OutboundLink")],1)]),v._v(" "),_("li",[_("a",{attrs:{href:"http://mybatis.javaboy.org/2019/1113/parametertype",target:"_blank",rel:"noopener noreferrer"}},[v._v("7.1 parameterType - MyBatis 教程 (javaboy.org)"),_("OutboundLink")],1)])])])}),[],!1,null,null,null);_.default=a.exports}}]);