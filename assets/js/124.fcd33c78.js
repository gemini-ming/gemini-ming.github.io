(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{498:function(t,v,_){"use strict";_.r(v);var a=_(4),r=Object(a.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"红黑树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#红黑树"}},[t._v("#")]),t._v(" 红黑树")]),t._v(" "),v("h2",{attrs:{id:"初识红黑树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#初识红黑树"}},[t._v("#")]),t._v(" 初识红黑树")]),t._v(" "),v("h3",{attrs:{id:"基础概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基础概念"}},[t._v("#")]),t._v(" 基础概念")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("红黑树也是一种"),v("strong",[t._v("自平衡的二叉搜索树")]),t._v("（通过颜色调整和旋转操作）")])]),t._v(" "),v("li",[v("p",[t._v("以前也叫做【平衡二叉B树】(Symmetric Binary B-tree)")])])]),t._v(" "),v("h3",{attrs:{id:"性质"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#性质"}},[t._v("#")]),t._v(" 性质")]),t._v(" "),v("p",[t._v("红黑树必须满足以下 5 条性质：")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("节点是红色(RED)或者黑色(BLACK)")])]),t._v(" "),v("li",[v("p",[t._v("根节点是 BLACK")])]),t._v(" "),v("li",[v("p",[t._v("叶子节点（外部节点，"),v("strong",[t._v("空节点")]),t._v("）都是 BLACK")])]),t._v(" "),v("li",[v("p",[t._v("RED 节点的子节点都是 BLACK")]),t._v(" "),v("ul",[v("li",[t._v("RED 节点的 "),v("code",[t._v("parent")]),t._v(" 都是 BLACK")]),t._v(" "),v("li",[t._v("从根节点到叶子节点的所有路径上"),v("strong",[t._v("不能有 2 个连续的 RED 节点")])])])]),t._v(" "),v("li",[v("p",[t._v("从任一节点到叶子节点的所有路径都包含相同数目的 BLACK 节点（即黑色高度相同）")])])]),t._v(" "),v("blockquote",[v("p",[t._v("思考：为何这些规则下，就能保证平衡？")])])])}),[],!1,null,null,null);v.default=r.exports}}]);