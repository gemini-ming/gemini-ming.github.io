(window.webpackJsonp=window.webpackJsonp||[]).push([[181],{555:function(t,v,n){"use strict";n.r(v);var o=n(4),_=Object(o.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"springboot-核心知识总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#springboot-核心知识总结"}},[t._v("#")]),t._v(" SpringBoot 核心知识总结")]),t._v(" "),v("h2",{attrs:{id:"简单说一下为什么要有-spring-boot"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#简单说一下为什么要有-spring-boot"}},[t._v("#")]),t._v(" 简单说一下为什么要有 Spring Boot？")]),t._v(" "),v("p",[t._v("因为 Spring 的缺点。")]),t._v(" "),v("p",[t._v("虽然 Spring 的组件代码是轻量级的，但它的配置却是重量级的(需要大量 XML 配置)")]),t._v(" "),v("p",[v("strong",[t._v("为了减少配置文件，简化开发 Spring")]),t._v("，所以 Spring Boot 诞生了。")]),t._v(" "),v("p",[t._v("具体演变如下图所示：")]),t._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"image","data-src":"https://cmty256.github.io/imgs-blog/Java/image.2i8cdypu1ws0.webp",loading:"lazy"}})]),t._v(" "),v("blockquote",[v("p",[t._v("一般说 Spring 框架指的都是 "),v("code",[t._v("Spring Framework")])])]),t._v(" "),v("h2",{attrs:{id:"说下-spring-boot-的主要优点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#说下-spring-boot-的主要优点"}},[t._v("#")]),t._v(" 说下 Spring Boot 的主要优点")]),t._v(" "),v("ol",[v("li",[v("strong",[t._v("开发基于 Spring 的应用程序很容易")]),t._v("。")]),t._v(" "),v("li",[v("strong",[t._v("Spring Boot 项目所需的开发或工程时间明显减少")]),t._v("，通常会提高整体生产力。")]),t._v(" "),v("li",[t._v("Spring Boot "),v("strong",[t._v("不需要编写大量样板代码、XML 配置和注释")]),t._v("。")]),t._v(" "),v("li",[t._v("Spring 引导应用程序可以很容易地与 Spring 生态系统集成，如 Spring JDBC、Spring ORM、Spring Data、Spring Security 等。")]),t._v(" "),v("li",[t._v("Spring Boot 遵循“固执己见的默认配置”，以减少开发工作 (默认配置可以修改)。")]),t._v(" "),v("li",[t._v("Spring Boot 应用程序"),v("strong",[t._v("提供嵌入式 HTTP 服务器")]),t._v("，如 Tomcat 和Jetty，"),v("strong",[t._v("可以轻松地开发和测试 web 应用程序")]),t._v("。 (这点很赞!普通运行 Java 程序的方式就能运行基于Spring Boot web 项目，省事很多)")]),t._v(" "),v("li",[t._v("Spring Boot "),v("strong",[t._v("提供命令行接口")]),t._v("(CLI)工具，"),v("strong",[t._v("用于开发和测试 Spring Boot 应用程序")]),t._v("，如 Java 或 Groovy。")]),t._v(" "),v("li",[t._v("Spring Boot "),v("strong",[t._v("提供了多种插件")]),t._v("，可以使用内置工具（如 Maven 和 Gradle）开发和测试 Spring Boot 应用程序。")])]),t._v(" "),v("h2",{attrs:{id:"什么是-spring-boot-starters"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-boot-starters"}},[t._v("#")]),t._v(" 什么是 Spring Boot Starters？")]),t._v(" "),v("p",[t._v("Spring Boot Starters 是 Spring Boot 提供的一组依赖项，用于快速启动常见的应用程序功能。")]),t._v(" "),v("p",[t._v("简单来说，就是一系列依赖关系的集合。")]),t._v(" "),v("p",[t._v("例如，如果想要快速启动一个 Spring Boot Web 应用程序，只需在项目中引入 "),v("code",[t._v("spring-boot-starter-web")]),t._v(" 这个依赖即可。")]),t._v(" "),v("h2",{attrs:{id:"spring-boot-支持哪些内嵌-servlet-容器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-支持哪些内嵌-servlet-容器"}},[t._v("#")]),t._v(" Spring Boot 支持哪些内嵌 Servlet 容器?")]),t._v(" "),v("p",[t._v("有三个：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Name")]),t._v(" "),v("th",[t._v("Servlet Version")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("Tomcat 9.0（默认容器）")]),t._v(" "),v("td",[t._v("4.0")])]),t._v(" "),v("tr",[v("td",[t._v("Jetty 9.4")]),t._v(" "),v("td",[t._v("3.1")])]),t._v(" "),v("tr",[v("td",[t._v("Undertow 2.0")]),t._v(" "),v("td",[t._v("4.0")])])])]),t._v(" "),v("h2",{attrs:{id:"spring-boot常用注解有哪些"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot常用注解有哪些"}},[t._v("#")]),t._v(" Spring boot常用注解有哪些？")]),t._v(" "),v("p",[t._v("Spring Boot 中常用的注解有：")]),t._v(" "),v("ol",[v("li",[v("p",[v("code",[t._v("@SpringBootApplication")]),t._v("：该注解用于标注 Spring Boot 应用程序主类，表示该类是一个 Spring Boot 应用程序的入口点，可以看作是 "),v("code",[t._v("@Configuration")]),t._v("、"),v("code",[t._v("@ComponentScan")]),t._v(" 和 "),v("code",[t._v("@EnableAutoConfiguration")]),t._v(" 注解的集合。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("@Controller")]),t._v("：该注解用于标注控制器类，表示该类是 Spring MVC 控制器，处理请求并返回响应。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("@RestController")]),t._v("：该注解是 "),v("code",[t._v("@Controller")]),t._v(" 注解的变体，表示该类是 RESTful API 的控制器类，处理请求并返回 JSON 格式的响应。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("@RequestMapping")]),t._v("：该注解用于将 URL 请求映射到处理器方法上，可以通过 "),v("code",[t._v("value")]),t._v(" 属性指定 URL 地址，通过 "),v("code",[t._v("method")]),t._v(" 属性指定请求方法，还可以通过 "),v("code",[t._v("params")]),t._v(" 属性和 "),v("code",[t._v("headers")]),t._v(" 属性指定请求参数和请求头。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("@Autowired")]),t._v("：该注解用于自动装配 Spring 容器中的 Bean 对象，可以用于字段、构造方法和 Set 方法上。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("@Component")]),t._v("：该注解用于标注一个"),v("strong",[t._v("类为 Spring Bean")]),t._v("，Spring 会自动扫描这个注解，并将该类注册到 Spring 容器中。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("@Bean")]),t._v("：该注解用于标注一个方法，表示该方法"),v("strong",[t._v("返回一个 Bean 对象")]),t._v("，该对象将被注册到 Spring 容器中。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("@Service")]),t._v("：该注解用于标注一个服务类，表示该类提供业务逻辑服务，通常与 "),v("code",[t._v("@Component")]),t._v(" 注解一起使用。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("@Repository")]),t._v("：该注解用于标注 DAO 类，表示该类提供对数据库的访问操作，通常与 "),v("code",[t._v("@Component")]),t._v(" 注解一起使用。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("@Value")]),t._v("：该注解用于注入配置文件中的"),v("strong",[t._v("属性值")]),t._v("，可以用于字段、构造方法和 Set 方法上。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("@Profile")]),t._v("：该注解用于指定 Bean 对象"),v("strong",[t._v("所属的环境")]),t._v("，可以根据不同的环境来创建不同的 Bean 对象。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("@Conditional")]),t._v("：该注解可以根据条件来决定是否创建 Bean 对象，可以与 "),v("code",[t._v("@Profile")]),t._v(" 注解一起使用，用于根据不同的环境来创建不同的 Bean 对象。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("@Configuration")]),t._v("：该注解用于标注配置类，表示该类是 Spring 配置类，可以包含 Bean 的定义和配置信息。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("@ComponentScan")]),t._v("：该注解用于指定要扫描的包或类，以及要扫描的 Bean 的范围。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("@EnableAutoConfiguration")]),t._v("：该注解用于自动配置 Spring Boot 应用程序，根据项目中添加的依赖项自动配置 Spring 应用程序，使得开发者不需要手动配置 Spring 应用程序。")])])]),t._v(" "),v("blockquote",[v("p",[t._v("当在 Spring Boot 应用程序中使用 "),v("code",[t._v("@ComponentScan")]),t._v(" 注解时，Spring Boot 将自动扫描注解类所在的包以及其子包下的所有类，将带有 "),v("code",[t._v("@Component")]),t._v("、"),v("code",[t._v("@Service")]),t._v("、"),v("code",[t._v("@Controller")]),t._v("、"),v("code",[t._v("@Repository")]),t._v(" 等注解的类注册为 Bean，这样这些 Bean 就可以被注入到其他类中使用了。")])]),t._v(" "),v("h2",{attrs:{id:"spring-是如何启动的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring-是如何启动的"}},[t._v("#")]),t._v(" Spring 是如何启动的？")]),t._v(" "),v("p",[t._v("以下是一个启动类代码：")]),t._v(" "),v("div",{staticClass:"language-java line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SpringBootApplication")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DemoApplication")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringApplication")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DemoApplication")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br"),v("span",{staticClass:"line-number"},[t._v("7")]),v("br"),v("span",{staticClass:"line-number"},[t._v("8")]),v("br")])]),v("p",[t._v("启动大概有 9 个步骤：")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("创建监听，并准备监听。")])]),t._v(" "),v("li",[v("p",[t._v("容器环境预配置。")])]),t._v(" "),v("li",[v("p",[t._v("打印 "),v("code",[t._v("banner")]),t._v("。")])]),t._v(" "),v("li",[v("p",[t._v("创建 "),v("code",[t._v("Spring")]),t._v(" 容器（"),v("code",[t._v("IoC")]),t._v("）。")])]),t._v(" "),v("li",[v("p",[t._v("容器刷新前置处理。")])]),t._v(" "),v("li",[v("p",[t._v("容器刷新。")])]),t._v(" "),v("li",[v("p",[t._v("容器刷新后置处理。")])]),t._v(" "),v("li",[v("p",[t._v("发出容器刷新结束通知。")])]),t._v(" "),v("li",[v("p",[t._v("调用 "),v("code",[t._v("runner")]),t._v(" 执行启动后的相关程序。")])])]),t._v(" "),v("p",[t._v("具体解析：")]),t._v(" "),v("ul",[v("li",[t._v("创建监听并准备监听，实际上做的就是从 "),v("code",[t._v("META-INF/spring.factories")]),t._v(" 中获取关于监听器的类然后返回一个监听器列表")]),t._v(" "),v("li",[t._v("打印 "),v("code",[t._v("banner")]),t._v("，就是在控制台输出一个 logo")]),t._v(" "),v("li",[t._v("容器操作也就是实现 "),v("code",[t._v("IoC")]),t._v(" 的步骤了")])]),t._v(" "),v("h2",{attrs:{id:"spring-boot-的自动配置是如何实现的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-的自动配置是如何实现的"}},[t._v("#")]),t._v(" Spring Boot 的自动配置是如何实现的?")]),t._v(" "),v("p",[t._v("总的来说，Spring Boot 的自动配置是通过"),v("strong",[t._v("条件注解机制")]),t._v("和"),v("strong",[t._v("优先级机制")]),t._v("来实现的.")]),t._v(" "),v("p",[t._v("主要包括以下几个步骤：")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("Spring Boot 在启动时会扫描 classpath 下的 META-INF/spring.factories 文件，该文件中包含了所有自动配置类的全限定名。")])]),t._v(" "),v("li",[v("p",[t._v("根据条件注解的条件，Spring Boot 会自动判断哪些自动配置类需要生效。")]),t._v(" "),v("blockquote",[v("p",[t._v("条件注解包括 "),v("code",[t._v("@ConditionalOnClass")]),t._v("、"),v("code",[t._v("@ConditionalOnMissingClass")]),t._v("、"),v("code",[t._v("@ConditionalOnBean")]),t._v("、"),v("code",[t._v("@ConditionalOnMissingBean")]),t._v("、"),v("code",[t._v("@ConditionalOnProperty")]),t._v("、"),v("code",[t._v("@ConditionalOnResource")]),t._v("、"),v("code",[t._v("@ConditionalOnWebApplication")]),t._v(" 等。")])])]),t._v(" "),v("li",[v("p",[t._v("如果某个自动配置类需要生效，Spring Boot 会自动将该类的配置信息添加到 Spring 上下文中，这样就可以在应用程序中使用了。")])]),t._v(" "),v("li",[v("p",[t._v("如果多个自动配置类之间存在冲突，Spring Boot 会根据优先级来决定哪个自动配置类生效。可以通过修改配置文件中的属性值来调整自动配置类的优先级。")])])]),t._v(" "),v("h2",{attrs:{id:"springboot-归约大于配置"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#springboot-归约大于配置"}},[t._v("#")]),t._v(" SpringBoot 归约大于配置")]),t._v(" "),v("p",[t._v("在 SpringBoot 中，约定大于配置的原则是指：")]),t._v(" "),v("ul",[v("li",[t._v("开发人员仅需规定应用中不符合约定的部分，而在没有规定配置的地方，采用默认配置，以力求最简配置为核心思想。")]),t._v(" "),v("li",[t._v("总的来说，遵循推荐"),v("strong",[t._v("默认配置")]),t._v("的思想。")]),t._v(" "),v("li",[t._v("当存在特殊需求的时候，自定义配置即可。")]),t._v(" "),v("li",[t._v("这样可以大大的减少配置工作，这就是所谓的 “约定” 。")])]),t._v(" "),v("h2",{attrs:{id:"启动类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#启动类"}},[t._v("#")]),t._v(" 启动类")]),t._v(" "),v("p",[t._v("启动类只能扫描到【当前包及其子包】下的类。")])])}),[],!1,null,null,null);v.default=_.exports}}]);