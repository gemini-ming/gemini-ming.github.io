(window.webpackJsonp=window.webpackJsonp||[]).push([[221],{595:function(t,a,v){"use strict";v.r(a);var _=v(4),r=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"认识-seata"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#认识-seata"}},[t._v("#")]),t._v(" 认识 Seata")]),t._v(" "),a("h2",{attrs:{id:"分布式事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务"}},[t._v("#")]),t._v(" 分布式事务")]),t._v(" "),a("p",[t._v("首先我们看看项目中的下单业务整体流程：")]),t._v(" "),a("p",[t._v("由于订单、购物车、商品分别在三个不同的微服务，而每个微服务都有自己独立的数据库，因此下单过程中就会跨多个数据库完成业务。而每个微服务都会执行自己的本地事务：")]),t._v(" "),a("ul",[a("li",[t._v("交易服务：下单事务")]),t._v(" "),a("li",[t._v("购物车服务：清理购物车事务")]),t._v(" "),a("li",[t._v("库存服务：扣减库存事务")])]),t._v(" "),a("p",[t._v("整个业务中，各个本地事务是有关联的。因此每个微服务的本地事务，也可以称为"),a("strong",[t._v("分支事务")]),t._v("。多个有关联的分支事务一起就组成了"),a("strong",[t._v("全局事务")]),t._v("。我们必须保证整个全局事务同时成功或失败。")]),t._v(" "),a("p",[t._v("我们知道每一个分支事务就是传统的"),a("strong",[t._v("单体事务")]),t._v("，都可以满足ACID特性，但全局事务跨越多个服务、多个数据库，是否还能满足呢？")]),t._v(" "),a("p",[t._v("我们来做一个测试，先进入购物车页面：")]),t._v(" "),a("ol",[a("li",[t._v("目前有 4 个购物车，然结算下单，进入订单结算页面，")]),t._v(" "),a("li",[t._v("然后将购物车中某个商品的库存修改为 "),a("code",[t._v("0")]),t._v("，")]),t._v(" "),a("li",[t._v("然后，提交订单，最终因库存不足导致下单失败，")]),t._v(" "),a("li",[t._v("然后去查看购物车列表，发现购物车数据"),a("strong",[t._v("依然被清空了")]),t._v("，并未回滚。")])]),t._v(" "),a("p",[t._v("事务并未遵循 ACID 的原则，归其原因就是参与事务的多个子业务在不同的微服务，跨越了不同的数据库。虽然每个单独的业务都能在本地遵循ACID，但是它们互相之间没有感知，不知道有人失败了，无法保证最终结果的统一，也就无法遵循ACID的事务特性了。")]),t._v(" "),a("p",[t._v("这就是分布式事务问题，出现以下情况之一就可能产生分布式事务问题：")]),t._v(" "),a("ul",[a("li",[t._v("业务跨多个服务实现")]),t._v(" "),a("li",[t._v("业务跨多个数据源实现")])]),t._v(" "),a("p",[t._v("接下来这一章我们就一起来研究下如何解决分布式事务问题。")]),t._v(" "),a("h2",{attrs:{id:"认识-seata-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#认识-seata-2"}},[t._v("#")]),t._v(" 认识 Seata")]),t._v(" "),a("h3",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),a("p",[t._v("解决分布式事务的方案有很多，但实现起来都比较复杂，因此我们一般会使用开源的框架来解决分布式事务问题。")]),t._v(" "),a("p",[t._v("在众多的开源分布式事务框架中，功能最完善、使用最多的就是阿里巴巴在 2019 年开源的 Seata 了。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://seata.io/zh-cn/docs/overview/what-is-seata.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://seata.io/zh-cn/docs/overview/what-is-seata.html"),a("OutboundLink")],1)]),t._v(" "),a("blockquote",[a("p",[t._v("其实分布式事务产生的一个重要原因：就是参与事务的多个分支事务互相无感知，不知道彼此的执行状态。")])]),t._v(" "),a("p",[t._v("因此解决分布式事务的思想非常简单：")]),t._v(" "),a("p",[t._v("就是找一个统一的"),a("strong",[t._v("事务协调者")]),t._v("，与多个分支事务通信，检测每个分支事务的执行状态，保证全局事务下的每一个分支事务同时成功或失败即可。大多数的分布式事务框架都是基于这个理论来实现的。")]),t._v(" "),a("h3",{attrs:{id:"三个角色"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三个角色"}},[t._v("#")]),t._v(" 三个角色")]),t._v(" "),a("p",[t._v("Seata 也不例外，在 Seata 的事务管理中有三个重要的角色：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("TC")]),t._v(" **(Transaction Coordinator - 事务协调者：**维护全局和分支事务的状态，协调全局事务提交或回滚。")]),t._v(" "),a("li",[a("strong",[t._v("TM (Transaction Manager) -")]),t._v(" **事务管理器：**定义全局事务的范围、开始全局事务、提交或回滚全局事务。")]),t._v(" "),a("li",[a("strong",[t._v("RM (Resource Manager) -")]),t._v(" **资源管理器：**管理分支事务，与【TC】交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。")])]),t._v(" "),a("h3",{attrs:{id:"工作架构图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工作架构图"}},[t._v("#")]),t._v(" 工作架构图")]),t._v(" "),a("p",[t._v("Seata 的工作架构如图所示：")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image","data-src":"https://cmty256.github.io/picx-images-hosting/microservice/image.6t6xiigq6s.png",loading:"lazy"}})]),t._v(" "),a("p",[t._v("其中，**TM **和 "),a("strong",[t._v("RM")]),t._v(" 可以理解为 Seata 的客户端部分，引入到参与事务的微服务依赖中即可。")]),t._v(" "),a("p",[t._v("将来 "),a("strong",[t._v("TM")]),t._v(" 和 "),a("strong",[t._v("RM")]),t._v(" 就会协助微服务，实现本地分支事务与 "),a("strong",[t._v("TC")]),t._v(" 之间交互，实现事务的提交或回滚。")]),t._v(" "),a("p",[t._v("而 "),a("strong",[t._v("TC")]),t._v(" 服务则是【事务协调中心】，是一个独立的微服务，需要单独部署。")]),t._v(" "),a("h3",{attrs:{id:"官方文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#官方文档"}},[t._v("#")]),t._v(" 官方文档")]),t._v(" "),a("p",[t._v("官网首页："),a("a",{attrs:{href:"https://seata.apache.org/zh-cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Apache Seata"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://spring-cloud-alibaba-group.github.io/zh-cn/docs/2022.0.0.0-RC2/user-guide/seata/quick-start/",target:"_blank",rel:"noopener noreferrer"}},[t._v("快速开始 | Spring Cloud Alibaba (spring-cloud-alibaba-group.github.io)"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"四种模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四种模式"}},[t._v("#")]),t._v(" 四种模式")]),t._v(" "),a("ol",[a("li",[t._v("AT 模式，默认，简单，需要增加 undo_log 表，生成反向 SQL，性能高\n"),a("ul",[a("li",[t._v("回滚后，原来没数据的，现在还是没数据")])])]),t._v(" "),a("li",[t._v("TCC 模式，try、confirm/cancel，三个阶段的代码都得自己实现，Seata 只负责调度\n"),a("ul",[a("li",[t._v("对业务代码侵入性较强，必要时可能还要修改数据库")])])]),t._v(" "),a("li",[t._v("SAGA 模式，长事务解决方案，需要程序员自己编写两阶段代码(AT 模式不需要写第二阶段)\n"),a("ul",[a("li",[t._v("基于状态机来实现的，需要一个 JSON 文件，可异步执行")])])]),t._v(" "),a("li",[t._v("XA 模式，XA 协议是由 X/Open 组织提出的分布式事务处理规范，基于数据库的 XA 协议来实现 2PC 又称为 XA 方案，适用于"),a("strong",[t._v("强一致性的场景")]),t._v("，比如金融、银行等\n"),a("ul",[a("li",[t._v("需要数据库本身支持XA协议，可以跨数据库")])])])]),t._v(" "),a("h3",{attrs:{id:"at-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#at-模式"}},[t._v("#")]),t._v(" AT 模式")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("seata 的 AT 模式会"),a("strong",[t._v("自动生成反向 sql")]),t._v("，且没有反引号 "),a("code",[t._v("``")]),t._v("，所以要求"),a("strong",[t._v("表里不能有关键字")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("AT 模式会有个"),a("strong",[t._v("全局锁")]),t._v("，用于"),a("strong",[t._v("防止脏读")]),t._v("，线程 1 的事务修改了库存，但还没提交事务，线程 2 读库存时，读的还是原来的库存。")])])]),t._v(" "),a("h2",{attrs:{id:"学习参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#学习参考"}},[t._v("#")]),t._v(" 学习参考")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://b11et3un53m.feishu.cn/wiki/QfVrw3sZvihmnPkmALYcUHIDnff",target:"_blank",rel:"noopener noreferrer"}},[t._v("‍⁢⁡‍‬\ufeff⁤⁣⁣‬\ufeff\ufeff‍‍⁢‬‬⁢⁡⁣‌\ufeff⁢‬⁤⁡‌⁤⁢‍⁢‬\ufeff⁡‍⁢day05-服务保护和分布式事务 - 飞书云文档 (feishu.cn)"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);