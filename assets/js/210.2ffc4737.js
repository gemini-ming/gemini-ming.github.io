(window.webpackJsonp=window.webpackJsonp||[]).push([[210],{583:function(v,_,t){"use strict";t.r(_);var e=t(4),r=Object(e.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"服务熔断和限流"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务熔断和限流"}},[v._v("#")]),v._v(" 服务熔断和限流")]),v._v(" "),_("blockquote",[_("p",[v._v("官方文档："),_("a",{attrs:{href:"https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel",target:"_blank",rel:"noopener noreferrer"}},[v._v("Sentinel · alibaba/spring-cloud-alibaba Wiki (github.com)"),_("OutboundLink")],1)])]),v._v(" "),_("h2",{attrs:{id:"前言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[v._v("#")]),v._v(" 前言")]),v._v(" "),_("p",[_("em",[v._v("为什么需要流控降级？")])]),v._v(" "),_("p",[v._v("我们的生产环境经常会出现一些不稳定的情况，如：")]),v._v(" "),_("ul",[_("li",[v._v("大促时瞬间洪峰流量导致系统超出最大负载，load 飙高，系统崩溃导致用户无法下单")]),v._v(" "),_("li",[v._v("“黑马”热点商品击穿缓存，DB 被打垮，挤占正常流量")]),v._v(" "),_("li",[v._v("调用端被不稳定服务拖垮，线程池被占满，导致整个调用链路卡死")])]),v._v(" "),_("p",[v._v("这些不稳定的场景可能会导致严重后果。大家可能想问：")]),v._v(" "),_("ol",[_("li",[v._v("如何做到均匀平滑的用户访问？")]),v._v(" "),_("li",[v._v("如何预防流量过大或服务不稳定带来的影响？")])]),v._v(" "),_("p",[v._v("这时候我们就要请出微服务稳定性的法宝 —— "),_("strong",[v._v("高可用流量防护")]),v._v("，其中重要的手段就是【流量控制】和【熔断降级】，它们是保障微服务稳 定性重要的一环。")]),v._v(" "),_("p",[_("em",[v._v("为什么需要流量控制？")])]),v._v(" "),_("p",[v._v("流量是非常随机性的、不可预测的。前一秒可能还风平浪静，后一秒可能就出现流量洪峰了（例如双十一零点的场景）。")]),v._v(" "),_("p",[v._v("然而我们系统的容量总是有限的，如果突然而来的流量超过了系统的承受能力，就可能会导致请求处理不过来，堆积的请求处理缓慢，CPU/Load 飙高，最后导致系统崩溃。")]),v._v(" "),_("p",[v._v("因此，我们需要针对这种突发的流量来进行限制，在尽可能处理请求的同时来保障服务不被打垮，这就是"),_("strong",[v._v("流量控制")]),v._v("。")]),v._v(" "),_("p",[_("em",[v._v("为什么需要熔断降级？")])]),v._v(" "),_("p",[v._v("一个服务常常会调用别的模块，可能是另外的一个远程服务、数据库，或者第三方 API 等。")]),v._v(" "),_("p",[v._v("例如，")]),v._v(" "),_("ul",[_("li",[v._v("支付的时候，可能需要远程调用银联提供的 API；")]),v._v(" "),_("li",[v._v("查询某个商品的价格，可能需要进行数据库查询。")])]),v._v(" "),_("p",[v._v("然而，这个"),_("strong",[v._v("被依赖服务的稳定性是不能保证的")]),v._v("。如果依赖的服务出现了不稳定的情况，请求的响应时间变长，那么调用服务的方法的响应时间也会变长，线程会产生堆积，最终可能耗尽业务自身的线程池，服务本身也变得不可用。")]),v._v(" "),_("p",[v._v("现代微服务架构都是分布式的，由非常多的服务组成。不同服务之间相互调用，组成复杂的调用链路。以上的问题在链路调用中会产生放大的效果。复杂链路上的某一环不稳定，就可能会层层级联，最终导致整个链路都不可用。"),_("strong",[v._v("因此我们需要对不稳定的弱依赖服务进行熔断降级，暂时切断不稳定调用，避免局部不稳定因素导致整体的雪崩。")])]),v._v(" "),_("h2",{attrs:{id:"sentinel-高可用护航的利器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#sentinel-高可用护航的利器"}},[v._v("#")]),v._v(" Sentinel: 高可用护航的利器")]),v._v(" "),_("p",[v._v("Sentinel 是阿里巴巴开源的，面向分布式服务架构的"),_("strong",[v._v("高可用防护组件")]),v._v("，"),_("em",[v._v("主要以流量为切入点")]),v._v("，从流量控制、流量整形、熔断降级、系统自适应保护、热点防护等多个维度来帮助开发者保障微服务的稳定性。")]),v._v(" "),_("blockquote",[_("p",[v._v("Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀、冷启动、消息削峰填谷、自适应流量控制、实时熔断下游不可用服务等，是保障微服务高可用的利器，原生支持 Java/Go/C++ 等多种语言，并且提供 Istio/Envoy 全局流控支持来为 Service Mesh 提供高可用防护的能力。")])]),v._v(" "),_("p",[v._v("Sentinel 的技术亮点：")]),v._v(" "),_("ul",[_("li",[v._v("高度可扩展能力：基础核心 + SPI 接口扩展能力，用户可以方便地扩展流控、通信、监控等功能。")]),v._v(" "),_("li",[v._v("多样化的流量控制策略（资源粒度、调用关系、流控指标、流控效果等多个维度），提供分布式集群流控的能力。")]),v._v(" "),_("li",[v._v("热点流量探测和防护。")]),v._v(" "),_("li",[v._v("对不稳定服务进行熔断降级和隔离。")]),v._v(" "),_("li",[v._v("全局维度的系统负载自适应保护，根据系统水位实时调节流量。")]),v._v(" "),_("li",[v._v("覆盖 API Gateway 场景，为 Spring Cloud Gateway、Zuul 提供网关流量控制的能力。")]),v._v(" "),_("li",[v._v("实时监控和规则动态配置管理能力。")])]),v._v(" "),_("p",[_("img",{staticClass:"lazy",attrs:{alt:"image","data-src":"https://cmty256.github.io/imgs-blog/microservice/image.3zehftvytem0.webp",loading:"lazy"}})]),v._v(" "),_("h2",{attrs:{id:"使用场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[v._v("#")]),v._v(" 使用场景")]),v._v(" "),_("ol",[_("li",[v._v("在服务提供方（Service Provider）的场景下，我们需要"),_("strong",[v._v("保护服务提供方自身不被流量洪峰打垮")]),v._v("。这时候通常根据服务提供方的服务能力进行流量控制，或针对特定的服务调用方进行限制。我们可以结合前期压测评估核心接口的承受能力，配置 QPS 模式的限流，当每秒的请求量超过设定的阈值时，会自动拒绝多余的请求。")]),v._v(" "),_("li",[v._v("为了"),_("strong",[v._v("避免调用其他服务时被不稳定的服务拖垮自身")]),v._v("，我们需要在服务调用端（Service Consumer）对不稳定服务依赖进行隔离和熔断。手段包括信号量隔离、异常比例降级、RT 降级等多种手段。")]),v._v(" "),_("li",[v._v("当系统长期处于低水位的情况下，流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。这时候我们可以借助 Sentinel 的 WarmUp 流控模式控制通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，而不是在一瞬间全部放行。这样"),_("strong",[v._v("可以给冷系统一个预热的时间")]),v._v("，避免冷系统被压垮。")]),v._v(" "),_("li",[v._v("利用 Sentinel 的匀速排队模式进行“削峰填谷”，把请求突刺均摊到一段时间内，"),_("strong",[v._v("让系统负载保持在请求处理水位之内")]),v._v("，同时尽可能地处理更多请求。")]),v._v(" "),_("li",[v._v("利用 Sentinel 的网关流控特性，在"),_("strong",[v._v("网关入口处进行流量防护")]),v._v("，或限制 API 的调用频率。")])]),v._v(" "),_("h2",{attrs:{id:"服务限流-熔断实战"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务限流-熔断实战"}},[v._v("#")]),v._v(" 服务限流/熔断实战")]),v._v(" "),_("p",[v._v("实例项目由四个模块构成：")]),v._v(" "),_("ol",[_("li",[v._v("service-api: 服务接口定义，供 consumer/provider 引用。")]),v._v(" "),_("li",[v._v("dubbo-provider: Dubbo 服务端，对外提供一些服务。")]),v._v(" "),_("li",[v._v("web-api-demo: Spring Boot Web 应用，其中的一些 API 会作为 consumer 来调用 dubbo-provider 获取结果。")])]),v._v(" "),_("h2",{attrs:{id:"流控降级组件对比"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#流控降级组件对比"}},[v._v("#")]),v._v(" 流控降级组件对比")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("功能/特性")]),v._v(" "),_("th",[v._v("Sentinel")]),v._v(" "),_("th",[v._v("Hystrix")]),v._v(" "),_("th",[v._v("resilience4j")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("隔离策略")]),v._v(" "),_("td",[v._v("信号量隔离（并发控制）")]),v._v(" "),_("td",[v._v("线程池隔离/信号量")]),v._v(" "),_("td",[v._v("信号量隔离")])]),v._v(" "),_("tr",[_("td",[v._v("熔断降级策略")]),v._v(" "),_("td",[v._v("基于慢调用比例、异常比例、异常数")]),v._v(" "),_("td",[v._v("基于异常比例")]),v._v(" "),_("td",[v._v("基于异常比例、响应时间")])]),v._v(" "),_("tr",[_("td",[v._v("实时统计实现")]),v._v(" "),_("td",[v._v("滑动窗口（LeapArray）")]),v._v(" "),_("td",[v._v("滑动窗口（基于 Rx Java）")]),v._v(" "),_("td",[v._v("Ring Bit Buffer")])]),v._v(" "),_("tr",[_("td",[v._v("动态规则配置")]),v._v(" "),_("td",[v._v("支持多种数据源")]),v._v(" "),_("td",[v._v("支持多种数据源")]),v._v(" "),_("td",[v._v("有限支持")])]),v._v(" "),_("tr",[_("td",[v._v("扩展性")]),v._v(" "),_("td",[v._v("多个扩展点")]),v._v(" "),_("td",[v._v("插件的形式")]),v._v(" "),_("td",[v._v("接口的形式")])]),v._v(" "),_("tr",[_("td",[v._v("基于注解的支持")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("支持")])]),v._v(" "),_("tr",[_("td",[v._v("限流")]),v._v(" "),_("td",[v._v("基于 QPS，支持基于调用关系的限流")]),v._v(" "),_("td",[v._v("有限的支持")]),v._v(" "),_("td",[v._v("Rate Limiter")])]),v._v(" "),_("tr",[_("td",[v._v("流量整形")]),v._v(" "),_("td",[v._v("支持预热模式与匀速排队控制效果")]),v._v(" "),_("td",[v._v("不支持")]),v._v(" "),_("td",[v._v("简单的 Rate Limiter 模式")])]),v._v(" "),_("tr",[_("td",[v._v("系统自适应保护")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("不支持")]),v._v(" "),_("td",[v._v("不支持")])]),v._v(" "),_("tr",[_("td",[v._v("多语言支持")]),v._v(" "),_("td",[v._v("Java/Go/C++")]),v._v(" "),_("td",[v._v("Java")]),v._v(" "),_("td",[v._v("Java")])]),v._v(" "),_("tr",[_("td",[v._v("Service Mesh 支持")]),v._v(" "),_("td",[v._v("支持 Envoy/Istio")]),v._v(" "),_("td",[v._v("不支持")]),v._v(" "),_("td",[v._v("不支持")])]),v._v(" "),_("tr",[_("td",[v._v("控制台")]),v._v(" "),_("td",[v._v("提供开箱即用的控制台，可配置规则、实时监控、机器发现等")]),v._v(" "),_("td",[v._v("简单的监控查看")]),v._v(" "),_("td",[v._v("不提供控制台，可对接 其它监控系统")])])])]),v._v(" "),_("h2",{attrs:{id:"最后"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#最后"}},[v._v("#")]),v._v(" 最后")]),v._v(" "),_("p",[_("em",[v._v("是不是服务的量级很小就不用进行限流防护了呢？")])]),v._v(" "),_("p",[_("em",[v._v("是不是微服务的架构比较简单就不用引入熔断保护机制了呢？")])]),v._v(" "),_("p",[v._v("其实，"),_("strong",[v._v("这与请求的量级、架构的复杂程度无关")]),v._v("。很多时候，可能正是一个非常边缘的服务出现故障而导致整体业务受影响，造成巨大损失。我们需要具 有面向失败设计的意识，在平时就做好容量规划和强弱依赖的梳理，合理地配置流控降级规 则，做好事前防护，而不是在线上出现问题以后再进行补救。")]),v._v(" "),_("h2",{attrs:{id:"参考书籍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考书籍"}},[v._v("#")]),v._v(" 参考书籍")]),v._v(" "),_("p",[_("a",{attrs:{href:"https://developer.aliyun.com/article/778252",target:"_blank",rel:"noopener noreferrer"}},[v._v("重磅下载 | Java 开发者必备手册《Spring Cloud Alibaba 从入门到实战》，阿里双11同款！-阿里云开发者社区 (aliyun.com)"),_("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=r.exports}}]);