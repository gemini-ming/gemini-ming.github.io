(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{479:function(n,a,t){"use strict";t.r(a);var s=t(4),r=Object(s.a)({},(function(){var n=this._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h1",{attrs:{id:"接口、lambda表达式与内部类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#接口、lambda表达式与内部类"}},[this._v("#")]),this._v(" 接口、lambda表达式与内部类")]),this._v(" "),n("p",[this._v("6.1　接口 222\n6.1.1　接口的概念 222\n6.1.2　接口的属性 228\n6.1.3　接口与抽象类 229\n6.1.4　静态和私有方法 230\n6.1.5　默认方法 230\n6.1.6　解决默认方法冲突 231\n6.1.7　接口与回调 233\n6.1.8　Comparator接口 235\n6.1.9　对象克隆 236\n6.2　lambda表达式 242\n6.2.1　为什么引入lambda表达式 242\n6.2.2　lambda表达式的语法 243\n6.2.3　函数式接口 245\n6.2.4　方法引用 247\n6.2.5　构造器引用 250\n6.2.6　变量作用域 250\n6.2.7　处理lambda表达式 252\n6.2.8　再谈Comparator 254\n6.3　内部类 255\n6.3.1　使用内部类访问对象状态 256\n6.3.2　内部类的特殊语法规则 259\n6.3.3　内部类是否有用、必要和\n安全 260\n6.3.4　局部内部类 262\n6.3.5　由外部方法访问变量 263\n6.3.6　匿名内部类 264\n6.3.7　静态内部类 267\n6.4　服务加载器 270\n6.5　代理 273\n6.5.1　何时使用代理 273\n6.5.2　创建代理对象 273\n6.5.3　代理类的特性 277")])])}),[],!1,null,null,null);a.default=r.exports}}]);