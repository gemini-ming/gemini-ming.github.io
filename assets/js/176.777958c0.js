(window.webpackJsonp=window.webpackJsonp||[]).push([[176],{550:function(a,t,v){"use strict";v.r(t);var e=v(4),n=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"spring-ioc-和-aop-详解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-ioc-和-aop-详解"}},[a._v("#")]),a._v(" Spring IoC 和 AOP 详解")]),a._v(" "),t("h2",{attrs:{id:"spring-ioc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-ioc"}},[a._v("#")]),a._v(" Spring IoC")]),a._v(" "),t("blockquote",[t("p",[a._v("什么是 IoC 控制反转")])]),a._v(" "),t("p",[a._v("IoC "),t("strong",[a._v("（Inversion of Control:控制反转）是一种设计思想")]),a._v("，而不是一个具体的技术实现。")]),a._v(" "),t("p",[a._v("IoC 的思想就是：将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。")]),a._v(" "),t("p",[a._v("注意：IoC 并非 Spring 特有，在其他语言中也有应用。")]),a._v(" "),t("blockquote",[t("p",[a._v("为什么叫控制反转？")])]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("控制")]),a._v("：指的是对象创建（实例化、管理）的权力")]),a._v(" "),t("li",[t("strong",[a._v("反转")]),a._v("：控制权交给外部环境（Spring 框架、IoC 容器）")])]),a._v(" "),t("blockquote",[t("p",[a._v("什么是 IoC 容器")])]),a._v(" "),t("p",[a._v("在 Spring 中， IoC 容器是 Spring 用来实现 IoC 的载体， IoC 容器实际上就是个 Map（key，value），Map 中存放的是各种对象。")]),a._v(" "),t("p",[a._v("工作流程：")]),a._v(" "),t("ol",[t("li",[a._v("IoC 容器实例化对象并存储起来，")]),a._v(" "),t("li",[a._v("函数（比如 "),t("code",[a._v("main")]),a._v("）需要哪个对象就往 IoC 容器拿就好。")])]),a._v(" "),t("p",[a._v("简单来说，就是"),t("strong",[a._v("起到了一个中间站的作用")]),a._v("。")]),a._v(" "),t("blockquote",[t("p",[a._v("总结")])]),a._v(" "),t("p",[a._v("Spring IoC 是 Spring 框架的核心特性之一。")]),a._v(" "),t("p",[a._v("它通过 IoC 容器来管理对象，实现了控制反转和依赖注入。")]),a._v(" "),t("p",[a._v("在 Spring 中，IoC 容器负责管理对象的创建和依赖关系的维护，应用程序只需要通过 IoC 容器获取所需的对象即可。")]),a._v(" "),t("p",[t("em",[a._v("在出现 IOC 之前，项目中是如何使用 Bean 的？")])]),a._v(" "),t("p",[a._v('在 Spring 框架的出现之前，项目中通常使用【手动创建】和【管理对象】的方式来使用 "bean"，尤其是在 JavaEE（现在称为 Jakarta EE）开发中。下面是在出现 IOC（控制反转）和 Spring 之前，项目中如何使用 "bean" 的一些常见做法：')]),a._v(" "),t("ol",[t("li",[t("strong",[a._v("手动创建对象：")]),a._v(" 在没有 Spring 框架的情况下，开发人员需要手动实例化和管理对象。这意味着你需要在代码中直接使用 "),t("code",[a._v("new")]),a._v(" 关键字来创建对象，然后自行处理对象的生命周期。（例如 new 对象，结合 get 方法使用）")]),a._v(" "),t("li",[t("strong",[a._v("工厂模式：")]),a._v(" 开发人员可能会使用工厂模式来创建对象。这涉及创建一个工厂类，其中包含创建和管理对象的逻辑。这种方式可以将对象的创建和使用分离开，但仍然需要手动管理对象的生命周期。")]),a._v(" "),t("li",[t("strong",[a._v("单例模式：")]),a._v(" 在很多情况下，开发人员会使用单例模式来确保系统中只有一个实例。这可以通过在类中添加一个私有构造函数和一个静态方法来实现。但这仍然需要手动管理单例实例的创建和使用。")]),a._v(" "),t("li",[t("strong",[a._v("依赖关系管理：")]),a._v(" 在没有 IOC 容器的情况下，开发人员需要手动处理对象之间的依赖关系。这可能会导致代码中充斥着对象之间的创建和注入逻辑。")]),a._v(" "),t("li",[t("strong",[a._v("手动资源释放：")]),a._v(" 在对象使用完毕后，开发人员需要手动释放资源，比如关闭数据库连接、释放文件句柄等。")])]),a._v(" "),t("p",[a._v("总之，在没有 IOC 和 Spring 框架之前，项目的代码可能会更加繁琐和冗长，需要开发人员手动管理对象的创建、注入和生命周期。Spring 框架的出现极大地简化了这些过程，通过 IOC 容器和依赖注入，让开发人员更专注于业务逻辑，而无需过多关注对象的创建和管理。")]),a._v(" "),t("h2",{attrs:{id:"说说循环依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#说说循环依赖"}},[a._v("#")]),a._v(" 说说循环依赖")]),a._v(" "),t("h3",{attrs:{id:"什么是循环依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是循环依赖"}},[a._v("#")]),a._v(" 什么是循环依赖？")]),a._v(" "),t("p",[a._v("Spring 循环依赖：简单说就是自己依赖自己，或者和别的 Bean 相互依赖。")]),a._v(" "),t("p",[a._v("只有单例的 Bean 才存在循环依赖的情况，"),t("strong",[a._v("原型")]),a._v("(Prototype)情况下，Spring 会直接抛出异常。原因很简单，AB 循环依赖，A 实例化的时候，发现依赖 B，创建 B 实例，创建 B 的时候发现需要 A，创建 A1 实例······无限套娃，直接把系统干垮。")]),a._v(" "),t("h3",{attrs:{id:"spring-可以解决哪些情况的循环依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-可以解决哪些情况的循环依赖"}},[a._v("#")]),a._v(" Spring 可以解决哪些情况的循环依赖？")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("当循环依赖的实例都采用 setter 方法注入的时候，Spring 可以支持，")])]),a._v(" "),t("li",[t("p",[a._v("都采用构造器注入的时候，不支持，")])]),a._v(" "),t("li",[t("p",[a._v("构造器注入和 setter 注入同时存在的时候，看天。")]),a._v(" "),t("p",[a._v("原因是 Spring 在创建 Bean 时默认会根据自然排序进行创建。比如 A 会先于 B 进行创建。")])])]),a._v(" "),t("h3",{attrs:{id:"那-spring-怎么解决循环依赖的呢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#那-spring-怎么解决循环依赖的呢"}},[a._v("#")]),a._v(" 那 Spring 怎么解决循环依赖的呢？")]),a._v(" "),t("h2",{attrs:{id:"autowired-的实现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#autowired-的实现原理"}},[a._v("#")]),a._v(" @Autowired 的实现原理？")]),a._v(" "),t("h2",{attrs:{id:"spring-bean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean"}},[a._v("#")]),a._v(" Spring Bean")]),a._v(" "),t("h3",{attrs:{id:"什么是-bean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-bean"}},[a._v("#")]),a._v(" 什么是 Bean？")]),a._v(" "),t("p",[a._v("简单来说，Bean 代指的就是那些"),t("strong",[a._v("被 IoC 容器所管理的对象")]),a._v("。")]),a._v(" "),t("p",[a._v("工作流程：")]),a._v(" "),t("blockquote",[t("p",[a._v("在应用程序"),t("strong",[a._v("运行时")])])]),a._v(" "),t("p",[a._v("Spring IoC 容器会根据 Bean 的定义和配置，创建对应的 Bean 对象，并对其进行初始化和依赖注入等操作。")]),a._v(" "),t("p",[a._v("一旦 Bean 对象被创建并注入了依赖关系，就可以被其他对象所引用和使用了。")]),a._v(" "),t("blockquote",[t("p",[a._v("在应用程序"),t("strong",[a._v("结束时")])])]),a._v(" "),t("p",[a._v("Spring IoC 容器会对 Bean 对象进行销毁操作，释放资源，从而完成 Bean 的生命周期。")]),a._v(" "),t("h3",{attrs:{id:"将一个类声明为-bean-的注解有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#将一个类声明为-bean-的注解有哪些"}},[a._v("#")]),a._v(" 将一个类声明为 Bean 的注解有哪些?")]),a._v(" "),t("ul",[t("li",[t("p",[t("code",[a._v("@Component")]),a._v("：通用的注解，可标注任意类为 "),t("code",[a._v("Spring")]),a._v(" 组件。")]),a._v(" "),t("p",[a._v("如果一个 Bean 不知道属于哪个层，可以使用 "),t("code",[a._v("@Component")]),a._v(" 注解标注。("),t("code",[a._v("config")]),a._v(" 配置层常用)")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("@Repository")]),a._v(": 对应持久层即 "),t("code",[a._v("Dao")]),a._v(" 层，主要用于数据库相关操作。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("@Service")]),a._v(" : 对应服务层，主要涉及一些复杂的逻辑，需要用到 Dao 层。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("@Controller")]),a._v(" : 对应 Spring MVC 控制层，主要用于接受用户请求并调用 "),t("code",[a._v("Service")]),a._v(" 层返回数据给前端页面。")])])]),a._v(" "),t("h3",{attrs:{id:"component-和-bean-的区别是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#component-和-bean-的区别是什么"}},[a._v("#")]),a._v(" @Component 和 @Bean 的区别是什么？")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("使用方式不同")]),a._v(" "),t("ul",[t("li",[t("p",[t("code",[a._v("@Component")]),a._v(" 注解作用于"),t("strong",[a._v("类")]),a._v("，")])]),a._v(" "),t("li",[t("p",[a._v("而 "),t("code",[a._v("@Bean")]),a._v(" 注解作用于"),t("strong",[a._v("方法")]),a._v("。")])])])]),a._v(" "),t("li",[t("p",[a._v("装配方式不同")]),a._v(" "),t("ul",[t("li",[t("p",[t("code",[a._v("@Component")]),a._v(" 通常是"),t("strong",[a._v("通过类路径扫描来自动侦测以及自动装配")]),a._v("到 Spring 容器中（我们可以使用 "),t("code",[a._v("@ComponentScan")]),a._v(" 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 bean 容器中）。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("@Bean")]),a._v(" 注解通常是我们在标有该注解的方法中定义产生这个 bean,"),t("code",[a._v("@Bean")]),a._v("告诉了 Spring 这是某个类的实例，当我需要用它的时候还给我。")]),a._v(" "),t("blockquote",[t("p",[a._v("简单来说，就是告诉 Spring，这个方法会返回一个对象，需要被 Spring 管理，当需要使用这个对象的时候，就可以通过注入的方式来获取它。")])])])])]),a._v(" "),t("li",[t("p",[t("code",[a._v("@Bean")]),a._v(" 注解比 "),t("code",[a._v("@Component")]),a._v(" 注解的自定义性更强")]),a._v(" "),t("ul",[t("li",[a._v("很多地方我们只能通过 "),t("code",[a._v("@Bean")]),a._v(" 注解来注册 bean。比如当我们"),t("strong",[a._v("引用第三方库中的类需要装配到 "),t("code",[a._v("Spring")]),a._v(" 容器时，则只能通过 "),t("code",[a._v("@Bean")]),a._v(" 来实现")]),a._v("。")])])])]),a._v(" "),t("h3",{attrs:{id:"哪些注解可以用来注入-bean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#哪些注解可以用来注入-bean"}},[a._v("#")]),a._v(" 哪些注解可以用来注入 Bean？")]),a._v(" "),t("p",[a._v("有三种：")]),a._v(" "),t("ul",[t("li",[a._v("Spring 内置的 "),t("code",[a._v("@Autowired")])]),a._v(" "),t("li",[a._v("JDK 内置的 "),t("code",[a._v("@Resource")]),a._v(" 和 "),t("code",[a._v("@Inject")])])]),a._v(" "),t("h3",{attrs:{id:"autowired-和-resource-的区别是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#autowired-和-resource-的区别是什么"}},[a._v("#")]),a._v(" @Autowired 和 @Resource 的区别是什么？")]),a._v(" "),t("ol",[t("li",[t("p",[t("code",[a._v("@Autowired")]),a._v(" 是 Spring 提供的注解，"),t("code",[a._v("@Resource")]),a._v(" 是 JDK 提供的注解。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("Autowired")]),a._v(" 默认的注入方式为"),t("code",[a._v("byType")]),a._v("（根据类型进行匹配），"),t("code",[a._v("@Resource")]),a._v("默认注入方式为 "),t("code",[a._v("byName")]),a._v("（根据名称进行匹配）。")])]),a._v(" "),t("li",[t("p",[a._v("当一个接口存在多个实现类的情况下，"),t("code",[a._v("@Autowired")]),a._v(" 和 "),t("code",[a._v("@Resource")]),a._v(" 都需要通过名称才能正确匹配到对应的 Bean。")]),a._v(" "),t("ul",[t("li",[t("p",[t("code",[a._v("Autowired")]),a._v(" 可以通过 "),t("code",[a._v("@Qualifier")]),a._v(" 注解来显式指定名称，")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("@Resource")]),a._v("可以通过 "),t("code",[a._v("name")]),a._v(" 属性来显式指定名称。")])])])])]),a._v(" "),t("h3",{attrs:{id:"什么是-bean-的作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-bean-的作用域"}},[a._v("#")]),a._v(" 什么是 Bean 的作用域？")]),a._v(" "),t("p",[a._v("Bean 的作用域指的是：Bean 实例在容器中存在的范围。")]),a._v(" "),t("p",[a._v("通过配置 Bean 的作用域，可以控制在何种情况下容器会创建新的 Bean 实例，以及何时销毁 Bean 实例。")]),a._v(" "),t("h3",{attrs:{id:"bean-的作用域有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bean-的作用域有哪些"}},[a._v("#")]),a._v(" Bean 的作用域有哪些?")]),a._v(" "),t("p",[a._v("Spring 框架提供了以下 5 种作用域：")]),a._v(" "),t("ol",[t("li",[t("code",[a._v("singleton")]),a._v("：单例模式，一个 Bean 在整个应用中只有一个实例（默认模式）。")]),a._v(" "),t("li",[t("code",[a._v("prototype")]),a._v("：原型模式，每次请求获取 Bean 时，都会创建一个新的实例。")]),a._v(" "),t("li",[t("code",[a._v("request")]),a._v("：请求作用域，每个 HTTP 请求都会创建一个新的实例。")]),a._v(" "),t("li",[t("code",[a._v("session")]),a._v("：会话作用域，每个 HTTP 会话都会创建一个新的实例。")]),a._v(" "),t("li",[t("code",[a._v("application/global-session")]),a._v("：全局会话作用域，每个 Web 应用在启动时创建一个 Bean（应用 Bean），该 bean 仅在当前应用启动时间内有效。")])]),a._v(" "),t("p",[a._v("**注意：**作用域为 "),t("code",[a._v("request")]),a._v("、"),t("code",[a._v("session")]),a._v(" 和 "),t("code",[a._v("global-session")]),a._v(" 的 Bean 只有在 Web 应用中才能使用。")]),a._v(" "),t("blockquote",[t("p",[a._v("配置方式")])]),a._v(" "),t("p",[a._v("可以使用 "),t("code",[a._v("@Scope")]),a._v(" 注解来指定 Bean 的作用域。")]),a._v(" "),t("p",[a._v("1、注解形式")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Configuration")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("AppConfig")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Bean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"userService"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Scope")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"singleton"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UserService")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("userService")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UserServiceImpl")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])]),t("p",[a._v("2、xml 形式")]),a._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("bean")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("id")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("userService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("class")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("com.example.UserService"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("scope")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("singleton"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("\x3c!-- ... --\x3e")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("bean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("h3",{attrs:{id:"单例-bean-的线程安全问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单例-bean-的线程安全问题"}},[a._v("#")]),a._v(" 单例 Bean 的线程安全问题")]),a._v(" "),t("blockquote",[t("p",[a._v("原因")])]),a._v(" "),t("p",[a._v("单例 Bean 存在线程问题，主要是因为"),t("strong",[a._v("当多个线程操作同一个对象的时候存在资源竞争")]),a._v("。")]),a._v(" "),t("blockquote",[t("p",[a._v("有两种常见的解决方法")])]),a._v(" "),t("ol",[t("li",[a._v("在 Bean 中尽量"),t("strong",[a._v("避免定义可变的成员变量")]),a._v("。")]),a._v(" "),t("li",[a._v("在类中定义一个 "),t("code",[a._v("ThreadLocal")]),a._v(" 成员变量，将需要的可变成员变量保存在 "),t("code",[a._v("ThreadLocal")]),a._v(" 中（推荐）。")])]),a._v(" "),t("blockquote",[t("p",[a._v("无状态的 bean 是线程安全的")])]),a._v(" "),t("p",[a._v("不过，大部分 Bean 实际都是无状态（没有实例变量）的（比如 Dao、Service），这种情况下，Bean 是线程安全的。")]),a._v(" "),t("h3",{attrs:{id:"bean-的生命周期了解么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bean-的生命周期了解么"}},[a._v("#")]),a._v(" Bean 的生命周期了解么？")]),a._v(" "),t("p",[a._v("Bean 的生命周期可以分为以下几个阶段：")]),a._v(" "),t("ol",[t("li",[t("strong",[a._v("实例化")]),a._v("：容器根据 Bean 的定义创建一个 Bean 实例。")]),a._v(" "),t("li",[t("strong",[a._v("填充属性")]),a._v("：容器将 Bean 的属性赋值给相应的属性或构造函数参数。")]),a._v(" "),t("li",[t("strong",[a._v("初始化")]),a._v("：容器会调用 Bean 的初始化方法，可以通过实现 InitializingBean 接口或在配置文件中指定 init-method 方法来定义 Bean 的初始化方法。")]),a._v(" "),t("li",[t("strong",[a._v("使用")]),a._v("：容器将 Bean 实例化后，可以直接使用它了。")]),a._v(" "),t("li",[t("strong",[a._v("销毁")]),a._v("：当容器关闭时，会调用 Bean 的销毁方法，可以通过实现 DisposableBean 接口或在配置文件中指定 destroy-method 方法来定义 Bean 的销毁方法。")])]),a._v(" "),t("blockquote",[t("p",[a._v("Bean 的处理过程可以干扰吗？")])]),a._v(" "),t("p",[a._v("可以通过改一些配置信息来进行干扰。")]),a._v(" "),t("blockquote",[t("p",[a._v("需要注意的点")])]),a._v(" "),t("p",[a._v("如果 Bean 实现了 DisposableBean 接口或指定了 destroy-method 方法，容器会自动调用 Bean 的销毁方法。")]),a._v(" "),t("p",[a._v("但如果应用程序是非正常关闭的，如直接关闭 JVM 进程，容器就无法进行正常的销毁操作，这时需要通过注册钩子函数，在 JVM 关闭时手动调用销毁方法。")]),a._v(" "),t("h2",{attrs:{id:"spring-aop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-aop"}},[a._v("#")]),a._v(" Spring AOP")]),a._v(" "),t("h3",{attrs:{id:"谈谈自己对于-aop-的了解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#谈谈自己对于-aop-的了解"}},[a._v("#")]),a._v(" 谈谈自己对于 AOP 的了解")]),a._v(" "),t("p",[a._v("AOP（Aspect-Oriented Programming，面向切面编程）"),t("strong",[a._v("是一种编程范式")]),a._v("，它通过将程序的横切关注点（如日志、事务、权限控制等）从业务逻辑中剥离出来，并通过切面与业务逻辑进行解耦，从而提高程序的模块化、可维护性和可扩展性。")]),a._v(" "),t("p",[a._v("其中"),t("strong",[a._v("核心是使用动态代理技术")]),a._v("，在运行时生成代理对象，并将切面织入到目标对象的方法调用过程中。")]),a._v(" "),t("blockquote",[t("p",[a._v("实现方式")])]),a._v(" "),t("p",[a._v("Spring 框架提供了两种方式来实现 AOP：")]),a._v(" "),t("ol",[t("li",[a._v("基于代理的 AOP：通过运行时生成代理对象并将切面织入到目标对象的方法调用过程中来实现 AOP。可以通过 "),t("code",[a._v("JDK")]),a._v(" 动态代理（对象实现了某个接口的情况下使用）或者 "),t("code",[a._v("CGLIB")]),a._v(" 动态代理来实现。")]),a._v(" "),t("li",[a._v("基于字节码的 AOP：通过在编译期间修改字节码来实现 AOP。可以使用 "),t("code",[a._v("AspectJ")]),a._v(" 框架来实现。")])]),a._v(" "),t("blockquote",[t("p",[a._v("AOP 切面编程设计到的 5 个专业术语")])]),a._v(" "),t("p",[a._v("AOP 的核心概念是切面（Aspect）、连接点（Join Point）、切点（Pointcut）、通知（Advice）和织入（Weaving）。")]),a._v(" "),t("ul",[t("li",[a._v("切面（Aspect）：一个关注点的模块化，这个关注点跨越多个对象，通常解决的是与业务无关的问题。")]),a._v(" "),t("li",[a._v("连接点（Join Point）：程序执行过程中的某个特定点，如方法的调用、异常抛出等。")]),a._v(" "),t("li",[a._v("切点（Pointcut）：一组连接点的集合，通常使用表达式指定。")]),a._v(" "),t("li",[a._v("通知（Advice）：在切面的连接点上执行的动作，包括前置通知、后置通知、环绕通知、异常通知和最终通知等。")]),a._v(" "),t("li",[a._v("织入（Weaving）：将切面应用到目标对象并创建新的代理对象的过程。")])]),a._v(" "),t("blockquote",[t("p",[a._v("优点")])]),a._v(" "),t("ol",[t("li",[a._v("代码复用：将横切关注点分离出来，可以避免在业务逻辑中重复编写相同的代码。")]),a._v(" "),t("li",[a._v("可维护性：将横切关注点与业务逻辑分离，在修改横切关注点时不会影响业务逻辑的实现。")]),a._v(" "),t("li",[a._v("可扩展性：可以方便地添加新的切面，而不需要修改现有的业务逻辑代码。")]),a._v(" "),t("li",[a._v("提高程序的可读性：将横切关注点从业务逻辑中分离出来，可以使业务逻辑更加清晰明了。")])]),a._v(" "),t("h3",{attrs:{id:"spring-aop-和-aspectj-aop-有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-aop-和-aspectj-aop-有什么区别"}},[a._v("#")]),a._v(" Spring AOP 和 AspectJ AOP 有什么区别？")]),a._v(" "),t("ol",[t("li",[a._v("AOP 集成了 AspectJ。")]),a._v(" "),t("li",[a._v("AOP 基于代理(Proxying)，而 AspectJ 基于字节码操作。")]),a._v(" "),t("li",[a._v("AspectJ 的功能更加强大。")]),a._v(" "),t("li",[a._v("切面少，两者性能差异不大；切面太多的话，最好选择 AspectJ，会更快。")])])])}),[],!1,null,null,null);t.default=n.exports}}]);